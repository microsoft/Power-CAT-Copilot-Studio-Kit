<?xml version="1.0" encoding="utf-8"?>
<ImportExportXml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" OrganizationVersion="9.2.25092.160" OrganizationSchemaType="Standard" CRMServerServiceabilityVersion="9.2.25093.00158">
  <Entities />
  <Roles />
  <Workflows />
  <FieldSecurityProfiles />
  <Templates />
  <EntityMaps />
  <EntityRelationships />
  <OrganizationSettings />
  <optionsets />
  <CustomControls />
  <EntityDataProviders />
  <AIModels>
    <AIModel>
      <msdyn_aimodelid>{b141656b-8546-437a-968e-94cce6c8be1c}</msdyn_aimodelid>
      <msdyn_name>Stage B - Copilot Pattern Evaluation</msdyn_name>
      <msdyn_templateid>{edfdb190-3791-45d8-9a6c-8f90a37c278a}</msdyn_templateid>
      <statecode>1</statecode>
      <statuscode>1</statuscode>
      <IsCustomizable>1</IsCustomizable>
      <msdyn_activerunconfigurationid>{076dd412-1e3b-42f5-bad5-b560cd141be4}</msdyn_activerunconfigurationid>
      <AIConfigurations>
        <AIConfiguration>
          <msdyn_aiconfigurationid>{076dd412-1e3b-42f5-bad5-b560cd141be4}</msdyn_aiconfigurationid>
          <msdyn_customconfiguration>{"version":"GptDynamicPrompt-2","prompt":[{"type":"literal","text":"####Role:\nYou evaluate Copilot Studio bot configuration data produced to detect design and orchestration quality issues.\n\n####Task:\nHere is a "},{"type":"inputVariable","id":"Copilot_20Details"},{"type":"literal","text":" output. This text is a JSON object containing bot details, component information, and topic metadata. Parse it safely and apply evaluation logic depending on whether IsGenerativeOrchestration is true or false.\n\n####Evaluation Scope\nInput schema\n```JSON\n{\n  \"BotId\": \"&lt;guid&gt;\",\n  \"BotName\": \"&lt;string&gt;\",\n  \"IsGenerativeOrchestration\": true|false,\n  \"AgentInstructions\": \"&lt;string&gt;\",\n  \"Components\": {\n    \"Topics\": [ ... ],\n    \"KnowledgeSources\": [ ... ],\n    \"Tools\": [ ... ],\n    \"CustomGPT\": [ { \"ToolName\": \"&lt;string&gt;\", \"otherMeta\": \"...\" } ]\n  },\n  \"failed_components\": [ ... ]\n}\n\n####Normalize before analysis:\nMissing strings → \"\", missing lists → [].\nFlatten TriggerQueries (whether [\"a\"] or [{\"item\":\"a\"}]) into plain string arrays.\nNormalize triggers (lowercase, remove punctuation, trim).\n\nExclude all system topics from evaluation — ignore any topic whose name matches one of:\n[\"Conversation Start\", \"Conversation End\", \"End of Conversation\", \"Conversational boosting\",  \"Escalate\", \"Fallback\", \"Multiple Topics Matched\", \"On Error\", \"Reset Conversation\", \"Sign in\"].\nThese should not be analyzed for trigger phrases, model metadata, or scoring.\n\n####Evaluation Logic\n1) If IsGenerativeOrchestration = true → Generative Agent Evaluation\nChecks\n- agent_instruction_quality – assess AgentInstructions for clarity, tone, structure, completeness.\nMust clearly define role, purpose, available tools/topics, limits, and response style.\nPenalize if too long, vague, missing context, or omits tool references.\n- model_metadata – ensure each topic’s ModelName and ModelDescription are present and meaningful.\n- input_descriptions – all input variables should include a description.\nReference links: all three docs above.\nScoring focus:\n- Agent Instructions (60 %)\n- Model Metadata (25 %)\n- Input Completeness (15 %)\n2) If IsGenerativeOrchestration = false → Classic Topic Evaluation\nChecks\n- insufficient_trigger_count – &lt; 5 triggers.\n- single_trigger_phrase – exactly 1 trigger.\n- single_word_trigger – trigger ≤ 1 word.\n- long_trigger_phrases – &gt; 10 words.\n- duplicate_or_similar_triggers – case-insensitive duplicates.\n- oversized_conditions – &gt; 15 conditions.\n- missing_input_descriptions – input vars without descriptions.\nReference links:\nhttps://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions\nhttps://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\nhttps://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/declarative-agent-instructions\nScoring focus:\n- Trigger Design (60 %)\n- Condition Complexity (20 %)\n- Input Completeness (20 %)\nReference link:\nhttps://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\n####Output JSON Format\nReturn only valid JSON (no extra text):\n```JSON\n{\n  \"BotId\": \"&lt;guid&gt;\",\n  \"BotName\": \"&lt;string&gt;\",\n  \"IsGenerativeOrchestration\": true|false,\n  \"overall_score\": &lt;0-100&gt;,\n  \"score_breakdown\": {\n    \"agent_component\": &lt;0-40&gt;,\n    \"trigger_component\": &lt;0-30&gt;,\n    \"inputs_component\": &lt;0-20&gt;,\n    \"conditions_component\": &lt;0-10&gt;\n  },\n  \"Summary\": {\n    \"topics_analyzed\": &lt;int&gt;,\n    \"failed_components\": &lt;int&gt;,\n    \"issues_summary\": {\n      \"agent_instruction_quality\": &lt;int&gt;,\n      \"missing_model_metadata\": &lt;int&gt;,\n      \"model_metadata_quality\": &lt;int&gt;,\n      \"missing_input_descriptions\": &lt;int&gt;,\n      \"insufficient_trigger_count\": &lt;int&gt;,\n      \"single_trigger_phrase\": &lt;int&gt;,\n      \"single_word_trigger\": &lt;int&gt;,\n      \"long_trigger_phrases\": &lt;int&gt;,\n      \"duplicate_or_similar_triggers\": &lt;int&gt;,\n      \"oversized_conditions\": &lt;int&gt;\n    }\n  },\n  \"Patterns\": [\n\n    {\n      \"pattern\": \"agent_instruction_issues\",\n      \"title\": \"Agent Instruction Evaluation\",\n      \"description\": \"Assesses the bot’s AgentInstructions for clarity, completeness, and adherence to Copilot Studio best practices.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions\",\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\",\n        \"https://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/declarative-agent-instructions\"\n      ],\n      \"items\": [\n        {\n          \"present\": true,\n          \"concise_score\": \"ok\",\n          \"mentions_tools_or_topics\": true,\n          \"missing_best_practices\": [\"no_examples\"],\n          \"recommendation\": \"Add concise examples and clarify available tools.\",\n          \"evidence_examples\": [\"...\"]\n        }\n      ]\n    },\n\n    {\n      \"pattern\": \"model_metadata_issues\",\n      \"title\": \"Model Metadata Evaluation\",\n      \"description\": \"Checks whether each topic defines both ModelName and ModelDescription for clarity and discoverability. Missing or empty values reduce orchestration quality.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\"\n      ],\n      \"topics\": [\n        { \"topic_name\": \"&lt;string&gt;\", \"missing_fields\": [\"ModelName\", \"ModelDescription\"] }\n      ]\n    },\n\n    {\n      \"pattern\": \"model_metadata_quality\",\n      \"title\": \"Model Metadata Quality\",\n      \"description\": \"Evaluates whether ModelName and ModelDescription clearly explain the topic’s purpose, scope, or task intent. Generic or vague names/descriptions reduce agent clarity.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\",\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions\"\n      ],\n      \"topics\": [\n        {\n          \"topic_name\": \"&lt;string&gt;\",\n          \"ModelName\": \"&lt;string&gt;\",\n          \"ModelDescription\": \"&lt;string&gt;\",\n          \"quality_score\": \"&lt;good|vague|too_short|unclear&gt;\",\n          \"recommendation\": \"&lt;string&gt;\"\n        }\n      ]\n    },\n\n    {\n      \"pattern\": \"insufficient_trigger_count\",\n      \"title\": \"Insufficient Trigger Count (&lt;5)\",\n      \"description\": \"Topics should have multiple diverse trigger phrases to improve recognition accuracy.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\"\n      ],\n      \"topics\": [\n        { \"topic_name\": \"&lt;string&gt;\", \"trigger_count\": &lt;int&gt;, \"recommendation\": \"Add more trigger phrases for better coverage.\" }\n      ]\n    },\n\n    {\n      \"pattern\": \"single_trigger_phrase\",\n      \"title\": \"Single Trigger Phrase\",\n      \"description\": \"Having only one trigger phrase limits the topic’s discoverability.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\"\n      ],\n      \"topics\": [\n        { \"topic_name\": \"&lt;string&gt;\", \"trigger\": \"&lt;string&gt;\", \"recommendation\": \"Add more synonyms or natural variations.\" }\n      ]\n    },\n\n    {\n      \"pattern\": \"single_word_trigger\",\n      \"title\": \"Single-word Trigger Phrases\",\n      \"description\": \"Single-word triggers are too vague and may cause unintended matches.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\"\n      ],\n      \"topics\": [\n        { \"topic_name\": \"&lt;string&gt;\", \"triggers\": [\"&lt;example&gt;\", \"...\"], \"recommendation\": \"Use multi-word, intent-based triggers.\" }\n      ]\n    },\n\n    {\n      \"pattern\": \"long_trigger_phrases\",\n      \"title\": \"Long Trigger Phrases (&gt;10 words)\",\n      \"description\": \"Classic topic triggers should be concise and intent-focused for better NLP accuracy.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\"\n      ],\n      \"topics\": [\n        { \"topic_name\": \"&lt;string&gt;\", \"triggers\": [\"&lt;example&gt;\", \"...\"], \"recommendation\": \"Shorten to essential keywords or phrases.\" }\n      ]\n    },\n\n    {\n      \"pattern\": \"duplicate_or_similar_triggers\",\n      \"title\": \"Duplicate or Similar Trigger Phrases\",\n      \"description\": \"Avoid near-identical triggers to prevent redundancy and confusion in recognition.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\"\n      ],\n      \"topics\": [\n        { \"topic_name\": \"&lt;string&gt;\", \"duplicates\": [\"&lt;example1&gt;\", \"&lt;example2&gt;\"], \"recommendation\": \"Keep one representative version of each intent.\" }\n      ]\n    },\n\n    {\n      \"pattern\": \"oversized_conditions\",\n      \"title\": \"Oversized Condition Blocks\",\n      \"description\": \"Topics with more than 15 conditions may indicate overly complex logic and should be modularized.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\"\n      ],\n      \"topics\": [\n        { \"topic_name\": \"&lt;string&gt;\", \"condition_count\": &lt;int&gt;, \"recommendation\": \"Simplify or split topic logic into smaller units.\" }\n      ]\n    },\n    {\n      \"pattern\": \"missing_input_descriptions\",\n      \"title\": \"Missing Input Descriptions\",\n      \"description\": \"Each input variable should have a clear description explaining its purpose and format.\",\n      \"docs\": [\n        \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\"\n      ],\n      \"topics\": [\n        { \"topic_name\": \"&lt;string&gt;\", \"missing_inputs\": [\"&lt;inputName&gt;\", \"...\"], \"recommendation\": \"Add concise descriptions for every input variable.\" }\n      ]\n    }\n  ]\n}\n\nKey Rules\n- Apply Agent Instruction &amp; Model Metadata checks only when IsGenerativeOrchestration = true.\n- Apply Trigger-based checks only when IsGenerativeOrchestration = false.\n- Output must be valid JSON — no tables, no extra text."}],"definitions":{"inputs":[{"id":"Copilot_20Details","text":"Copilot Details","type":"text","quickTestValue":"{\n  \"IsGenerativeOrchestration\": true,\n  \"BotId\": \"12643364-5b24-41c2-a95b-d0671076d828\",\n  \"BotName\": \"Energy Feedback Collector\",\n  \"Agent Instructions\": \"- Collect user feedback on taste, packaging, and energy boost.\\n- Ensure feedback is gathered in a structured manner for easy analysis.\\n- Do not collect personal information.\",\n  \"failed_components\": [],\n  \"Components\": {\n    \"Topics\": [\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Sign in \",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Escalate\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"Talk to agent\"\n          },\n          {\n            \"item\": \"Talk to a person\"\n          },\n          {\n            \"item\": \"Talk to someone\"\n          },\n          {\n            \"item\": \"Call back\"\n          },\n          {\n            \"item\": \"Call customer service\"\n          },\n          {\n            \"item\": \"Call me please\"\n          },\n          {\n            \"item\": \"Call support\"\n          },\n          {\n            \"item\": \"Call technical support\"\n          },\n          {\n            \"item\": \"Can an agent call me\"\n          },\n          {\n            \"item\": \"Can I call\"\n          },\n          {\n            \"item\": \"Can I get in touch with someone else\"\n          },\n          {\n            \"item\": \"Can I get real agent support\"\n          },\n          {\n            \"item\": \"Can I get transferred to a person to call\"\n          },\n          {\n            \"item\": \"Can I have a call in number Or can I be called\"\n          },\n          {\n            \"item\": \"Can I have a representative call me\"\n          },\n          {\n            \"item\": \"Can I schedule a call\"\n          },\n          {\n            \"item\": \"Can I speak to a representative\"\n          },\n          {\n            \"item\": \"Can I talk to a human\"\n          },\n          {\n            \"item\": \"Can I talk to a human assistant\"\n          },\n          {\n            \"item\": \"Can someone call me\"\n          },\n          {\n            \"item\": \"Chat with a human\"\n          },\n          {\n            \"item\": \"Chat with a representative\"\n          },\n          {\n            \"item\": \"Chat with agent\"\n          },\n          {\n            \"item\": \"Chat with someone please\"\n          },\n          {\n            \"item\": \"Connect me to a live agent\"\n          },\n          {\n            \"item\": \"Connect me to a person\"\n          },\n          {\n            \"item\": \"Could some one contact me by phone\"\n          },\n          {\n            \"item\": \"Customer agent\"\n          },\n          {\n            \"item\": \"Customer representative\"\n          },\n          {\n            \"item\": \"Customer service\"\n          },\n          {\n            \"item\": \"I need a manager to contact me\"\n          },\n          {\n            \"item\": \"I need customer service\"\n          },\n          {\n            \"item\": \"I need help from a person\"\n          },\n          {\n            \"item\": \"I need to speak with a live argent\"\n          },\n          {\n            \"item\": \"I need to talk to a specialist please\"\n          },\n          {\n            \"item\": \"I want to talk to customer service\"\n          },\n          {\n            \"item\": \"I want to proceed with live support\"\n          },\n          {\n            \"item\": \"I want to speak with a consultant\"\n          },\n          {\n            \"item\": \"I want to speak with a live tech\"\n          },\n          {\n            \"item\": \"I would like to speak with an associate\"\n          },\n          {\n            \"item\": \"I would like to talk to a technician\"\n          },\n          {\n            \"item\": \"Talk with tech support member\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Start Over\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"let's begin again\"\n          },\n          {\n            \"item\": \"start over\"\n          },\n          {\n            \"item\": \"start again\"\n          },\n          {\n            \"item\": \"restart\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Fallback\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Greeting\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"Good afternoon\"\n          },\n          {\n            \"item\": \"Good morning\"\n          },\n          {\n            \"item\": \"Hello\"\n          },\n          {\n            \"item\": \"Hey\"\n          },\n          {\n            \"item\": \"Hi\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Thank you\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"thanks\"\n          },\n          {\n            \"item\": \"thank you\"\n          },\n          {\n            \"item\": \"thanks so much\"\n          },\n          {\n            \"item\": \"ty\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Conversation Start\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Multiple Topics Matched\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Notify - Energy Drink Feedback\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"This action sends notification to a user asking for feedback for an energy drink.\",\n        \"ModelName\": \"Notify - Energy Drink Feedback with meaningful description\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Microsoft Dataverse - Dataverse MCP Server\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"Dataverse MCP Server. This server can be used to get information from Dataverse as well as get knowledge from Dataverse and various other tabular sources. To check what all sources this server can access, use the list_knowledge_sources tool. list_knowledge_sources responsds with the source and tables that this server can access. \",\n        \"ModelName\": \"Dataverse MCP Server\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Conversational boosting\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Goodbye\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"Bye\"\n          },\n          {\n            \"item\": \"Bye for now\"\n          },\n          {\n            \"item\": \"Bye now\"\n          },\n          {\n            \"item\": \"Good bye\"\n          },\n          {\n            \"item\": \"No thank you. Goodbye.\"\n          },\n          {\n            \"item\": \"See you later\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Reset Conversation\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"End of Conversation\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Product Cost Specifier\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"What is the cost of [product]?\"\n          },\n          {\n            \"item\": \"How much does [product] cost?\"\n          },\n          {\n            \"item\": \"Price of [product]\"\n          }\n        ],\n        \"ModelDescription\": \"This topic provides the cost of a product based on its name and quantity.\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"On Error\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      }\n    ],\n    \"Tools\": [\n      {\n        \"item\": \"Energy Feedback Collector\"\n      }\n    ],\n    \"KnowledgeSources\": [\n      {\n        \"item\": \"Technical Design Document draft v0.1.docx\"\n      }\n    ]\n  }\n}"}],"formulas":[],"data":[],"output":{"formats":["json"],"jsonSchema":{"type":"object","properties":{"BotId":{"type":"string"},"Summary":{"type":"object","properties":{"issues_summary":{"type":"object","properties":{"single_trigger_phrase":{"type":"number"},"missing_input_descriptions":{"type":"number"},"agent_instruction_quality":{"type":"number"},"long_trigger_phrases":{"type":"number"},"model_metadata_quality":{"type":"number"},"oversized_conditions":{"type":"number"},"single_word_trigger":{"type":"number"},"missing_model_metadata":{"type":"number"},"insufficient_trigger_count":{"type":"number"},"duplicate_or_similar_triggers":{"type":"number"}}},"topics_analyzed":{"type":"number"},"failed_components":{"type":"number"}}},"IsGenerativeOrchestration":{"type":"boolean"},"score_breakdown":{"type":"object","properties":{"agent_component":{"type":"number"},"conditions_component":{"type":"number"},"trigger_component":{"type":"number"},"inputs_component":{"type":"number"}}},"overall_score":{"type":"number"},"BotName":{"type":"string"},"Patterns":{"type":"array","items":{"type":"object","properties":{"pattern":{"type":"string"},"items":{"type":"array","items":{"type":"object","properties":{"concise_score":{"type":"string"},"recommendation":{"type":"string"},"missing_best_practices":{"type":"array","items":{"type":"object","properties":{"item":{"type":"string"}},"required":["item"]}},"present":{"type":"boolean"},"mentions_tools_or_topics":{"type":"boolean"},"evidence_examples":{"type":"array","items":{"type":"object","properties":{"item":{"type":"string"}},"required":["item"]}}},"required":["concise_score","recommendation","missing_best_practices","present","mentions_tools_or_topics","evidence_examples"]}},"title":{"type":"string"},"description":{"type":"string"},"docs":{"type":"array","items":{"type":"object","properties":{"item":{"type":"string"}},"required":["item"]}},"topics":{"type":"array","items":{"type":"object","properties":{"missing_fields":{"type":"array","items":{"type":"object","properties":{"item":{"type":"string"}},"required":["item"]}},"topic_name":{"type":"string"}},"required":["missing_fields","topic_name"]}}},"required":["pattern","title","description","docs"]}}}},"jsonExamples":[{"BotId":"12643364-5b24-41c2-a95b-d0671076d828","Summary":{"issues_summary":{"single_trigger_phrase":0,"missing_input_descriptions":0,"agent_instruction_quality":3,"long_trigger_phrases":0,"model_metadata_quality":6,"oversized_conditions":0,"single_word_trigger":0,"missing_model_metadata":6,"insufficient_trigger_count":0,"duplicate_or_similar_triggers":0},"topics_analyzed":8,"failed_components":0},"IsGenerativeOrchestration":true,"score_breakdown":{"agent_component":12,"conditions_component":10,"trigger_component":0,"inputs_component":20},"overall_score":42,"BotName":"Energy Feedback Collector","Patterns":[{"pattern":"agent_instruction_issues","items":[{"concise_score":"too_short","recommendation":"AgentInstructions should be longer, clearer, and cover context. Add explicit references to bot tools or topics. Add concise examples to AgentInstructions.","missing_best_practices":[{"item":"missing_clarity"},{"item":"no_tool_or_topic_reference"},{"item":"no_examples"}],"present":false,"mentions_tools_or_topics":false,"evidence_examples":[{"item":""}]}],"title":"Agent Instruction Evaluation","description":"Assesses the bot’s AgentInstructions for clarity, completeness, and adherence to Copilot Studio best practices.","docs":[{"item":"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions"},{"item":"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance"},{"item":"https://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/declarative-agent-instructions"}]},{"pattern":"model_metadata_issues","title":"Model Metadata Evaluation","description":"Checks whether each topic defines both ModelName and ModelDescription for clarity and discoverability. Missing or empty values reduce orchestration quality.","topics":[{"missing_fields":[{"item":"ModelName"},{"item":"ModelDescription"}],"topic_name":"Sign in "},{"missing_fields":[{"item":"ModelName"},{"item":"ModelDescription"}],"topic_name":"Start Over"},{"missing_fields":[{"item":"ModelName"},{"item":"ModelDescription"}],"topic_name":"Greeting"},{"missing_fields":[{"item":"ModelName"},{"item":"ModelDescription"}],"topic_name":"Thank you"},{"missing_fields":[{"item":"ModelName"},{"item":"ModelDescription"}],"topic_name":"Goodbye"},{"missing_fields":[{"item":"ModelName"}],"topic_name":"Product Cost Specifier"}],"docs":[{"item":"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance"}]},{"pattern":"model_metadata_quality","title":"Model Metadata Quality","description":"Evaluates whether ModelName and ModelDescription clearly explain the topic’s purpose, scope, or task intent. Generic or vague names/descriptions reduce agent clarity.","topics":[{"recommendation":"Add ModelName and ModelDescription.","quality_score":"missing","topic_name":"Sign in ","ModelDescription":"","ModelName":""},{"recommendation":"Add ModelName and ModelDescription.","quality_score":"missing","topic_name":"Start Over","ModelDescription":"","ModelName":""},{"recommendation":"Add ModelName and ModelDescription.","quality_score":"missing","topic_name":"Greeting","ModelDescription":"","ModelName":""},{"recommendation":"Add ModelName and ModelDescription.","quality_score":"missing","topic_name":"Thank you","ModelDescription":"","ModelName":""},{"recommendation":"","quality_score":"good","topic_name":"Notify - Energy Drink Feedback","ModelDescription":"This action sends notification to a user asking for feedback for an energy drink.","ModelName":"Notify - Energy Drink Feedback with meaningful description"},{"recommendation":"","quality_score":"good","topic_name":"Microsoft Dataverse - Dataverse MCP Server","ModelDescription":"Dataverse MCP Server. This server can be used to get information from Dataverse as well as get knowledge from Dataverse and various other tabular sources. To check what all sources this server can access, use the list_knowledge_sources tool. list_knowledge_sources responsds with the source and tables that this server can access. ","ModelName":"Dataverse MCP Server"},{"recommendation":"Add ModelName and ModelDescription.","quality_score":"missing","topic_name":"Goodbye","ModelDescription":"","ModelName":""},{"recommendation":"Add ModelName and ModelDescription.","quality_score":"missing","topic_name":"Product Cost Specifier","ModelDescription":"This topic provides the cost of a product based on its name and quantity.","ModelName":""}],"docs":[{"item":"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance"},{"item":"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions"}]},{"pattern":"missing_input_descriptions","title":"Missing Input Descriptions","description":"Each input variable should have a clear description explaining its purpose and format.","topics":[],"docs":[{"item":"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance"}]},{"pattern":"oversized_conditions","title":"Oversized Condition Blocks","description":"Topics with more than 15 conditions may indicate overly complex logic and should be modularized.","topics":[],"docs":[{"item":"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices"}]}]}]}},"modelParameters":{"modelType":"o3","gptParameters":{"temperature":1}},"settings":{"recordRetrievalLimit":30,"shouldPreserveRecordLinks":null,"runtime":"codeinterpreter"},"code":"\nimport logging\nfrom workerinterfaces import ExecutorInterface, ExecutionResult\nfrom typing import Any, Dict, List\nimport json\nimport string\n\n\ndef safe_parse_json(s: str):\n    try:\n        return json.loads(s)\n    except Exception:\n        return {}\n\ndef safe_lower_no_punct(text: str):\n    if not isinstance(text, str):\n        return \"\"\n    return text.lower().translate(str.maketrans('', '', string.punctuation)).strip()\n\ndef is_system_topic(topic_name: str) -&gt; bool:\n    system_topics = {\n        \"Conversation Start\", \"Conversation End\", \"End of Conversation\",\n        \"Conversational boosting\", \"Escalate\", \"Fallback\", \"Multiple Topics Matched\",\n        \"On Error\", \"Reset Conversation\", \"Sign in\"\n    }\n    return safe_lower_no_punct(topic_name) in {safe_lower_no_punct(t) for t in system_topics}\n\ndef quality_of_agent_instruction(instr: str, mention_tools: bool, length: int) -&gt; (str, List[str]):\n    \"\"\"Evaluate the agent instruction for clarity, structure, and tool mention.\"\"\"\n    # Vague if &lt; 30 chars. Too long if &gt; 1000 chars. Missing tools if not mentioning tools/topics.\n    # Should define role, purpose, available tools/topics, limits, style.\n    problems = []\n    if length &lt; 30:\n        problems.append(\"too_short\")\n    if length &gt; 1000:\n        problems.append(\"too_long\")\n    # Look for the phrase 'tool' or 'topic' or any actual tool/topic by name\n    if not mention_tools:\n        problems.append(\"missing_tool_topic_reference\")\n    # If it doesn't mention tone/style/limits\n    lower = instr.lower()\n    must_words = [\"collect\", \"feedback\"]  # since this bot's function is feedback collector\n    if not any(w in lower for w in must_words):\n        problems.append(\"missing_purpose\")\n    # Very basic check for limits (e.g., \"do not\", \"limits\", etc.)\n    if \"do not\" not in lower and \"limit\" not in lower:\n        problems.append(\"missing_limits\")\n    # Basic best practices: could fuzzily look for clarity, completeness\n    return (\"ok\" if len(problems) == 0 else \"issue\"), problems\n\ndef normalize_trigger_queries(trigger_queries):\n    # Each trigger may be { \"item\": ... }, string, or list thereof\n    triggers = []\n    if isinstance(trigger_queries, list):\n        for item in trigger_queries:\n            if isinstance(item, dict) and \"item\" in item:\n                triggers.append(str(item[\"item\"]).strip())\n            elif isinstance(item, str):\n                triggers.append(item.strip())\n    elif isinstance(trigger_queries, dict):\n        for val in trigger_queries.values():\n            triggers.append(str(val).strip())\n    elif isinstance(trigger_queries, str):\n        triggers.append(trigger_queries.strip())\n    return triggers\n\ndef meaningful_meta(meta: str) -&gt; bool:\n    \"\"\"Returns True if meta is non-empty, not generic, not whitespace.\"\"\"\n    if not isinstance(meta, str):\n        return False\n    text = meta.strip().lower()\n    # Too generic if empty or commonly used placeholders\n    return bool(text) and text not in {\"\", \"topic\", \"model\", \"none\", \"n/a\"}\n\ndef meta_quality(meta: str) -&gt; str:\n    if not isinstance(meta, str) or not meta.strip():\n        return \"too_short\"\n    text = meta.strip()\n    if len(text) &lt; 10:\n        return \"too_short\"\n    # check vague/generic-ness\n    too_vague = False\n    if text.lower() in {\"topic\", \"model\", \"none\", \"n/a\"}:\n        too_vague = True\n    if too_vague:\n        return \"vague\"\n    return \"good\"  # Better to flag specifically in pattern objects\n\nclass PromptExecutor(ExecutorInterface):\n    async def execute(self, logger: logging.Logger, connector_client, input: Dict[str, Any]) -&gt; ExecutionResult:\n        logger.info(\"Starting Copilot Studio bot config evaluation\")\n\n        copilot_details_raw = input.get(\"Copilot_20Details\", \"\")\n        bot = safe_parse_json(copilot_details_raw)\n        if not isinstance(bot, dict):\n            bot = {}\n\n        # Step 1: Normalize/initialize missing fields\n        BotId = bot.get(\"BotId\", \"\")\n        BotName = bot.get(\"BotName\", \"\")\n        IsGenerativeOrchestration = bool(bot.get(\"IsGenerativeOrchestration\", False))\n        AgentInstructions = bot.get(\"Agent Instructions\") or bot.get(\"AgentInstructions\") or \"\"\n        failed_components = bot.get(\"failed_components\", [])\n        Components = bot.get(\"Components\", {})\n        if not isinstance(Components, dict):\n            Components = {}\n\n        # Normalize Topics\n        all_topics = Components.get(\"Topics\", [])\n        if not isinstance(all_topics, list):\n            all_topics = []\n        # Filter out system topics\n        user_topics = [t for t in all_topics if not is_system_topic(t.get(\"TopicName\", \"\"))]\n\n        # Get tools and topic names (present for reference matching)\n        tool_names = []\n        if isinstance(Components.get(\"Tools\", []), list):\n            for t in Components.get(\"Tools\", []):\n                if isinstance(t, dict) and \"item\" in t:\n                    tool_names.append(str(t[\"item\"]))\n                elif isinstance(t, str):\n                    tool_names.append(str(t))\n        topic_names = [t.get(\"TopicName\", \"\") for t in user_topics]\n\n        # --- 1. Agent Instruction Evaluation ---\n        logger.info(\"Evaluating AgentInstructions for quality and best practices\")\n        instr_tools_present = any(tool_name.lower() in AgentInstructions.lower() for tool_name in tool_names + topic_names)\n        concise_score, agent_instruction_problems = quality_of_agent_instruction(AgentInstructions, instr_tools_present, len(AgentInstructions))\n        agent_instruction_quality_issues = 1 if agent_instruction_problems else 0\n\n        pattern_agent_instruction = {\n            \"pattern\": \"agent_instruction_issues\",\n            \"title\": \"Agent Instruction Evaluation\",\n            \"description\": \"Assesses the bot’s AgentInstructions for clarity, completeness, and adherence to Copilot Studio best practices.\",\n            \"docs\": [\n                \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions\",\n                \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\",\n                \"https://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/declarative-agent-instructions\"\n            ],\n            \"items\": [\n                {\n                    \"present\": bool(AgentInstructions.strip()),\n                    \"concise_score\": concise_score,\n                    \"mentions_tools_or_topics\": instr_tools_present,\n                    \"missing_best_practices\": [{\"item\": p} for p in agent_instruction_problems],\n                    \"recommendation\": \"Add concise examples and clarify available tools.\" if agent_instruction_problems else \"Instruction provides good structure and mentions tools/topics.\",\n                    \"evidence_examples\": [{\"item\": AgentInstructions[:80] + \"...\"}] if AgentInstructions else []\n                }\n            ]\n        }\n\n        # --- 2. Model Metadata issues and quality ---\n        logger.info(\"Analyzing topics for model metadata completeness and quality\")\n        topics_missing_meta = []\n        topics_metadata_quality = []\n        missing_model_metadata_count = 0\n        poor_quality_meta_count = 0\n        for topic in user_topics:\n            topic_name = topic.get(\"TopicName\", \"\")\n            model_name = topic.get(\"ModelName\", \"\")\n            model_desc = topic.get(\"ModelDescription\", \"\")\n            missing_fields = []\n            if not meaningful_meta(model_name):\n                missing_fields.append(\"ModelName\")\n            if not meaningful_meta(model_desc):\n                missing_fields.append(\"ModelDescription\")\n            if missing_fields:\n                missing_model_metadata_count += 1\n                topics_missing_meta.append({\n                    \"topic_name\": topic_name,\n                    \"missing_fields\": [{\"item\": f} for f in missing_fields]\n                })\n            # Check quality even if present\n            if model_name.strip() or model_desc.strip():\n                qn = meta_quality(model_name)\n                qd = meta_quality(model_desc)\n                quality_score = \"good\"\n                recommendation = \"Both ModelName and ModelDescription are informative.\"\n                if qn != \"good\" or qd != \"good\":\n                    quality_score = f\"{qn if qn != 'good' else ''}/{qd if qd != 'good' else ''}\".replace(\"/\", \"\").strip()\n                    recommendation = \"Expand and clarify ModelName and ModelDescription for better topic intent clarity.\"\n                    poor_quality_meta_count += 1\n                topics_metadata_quality.append({\n                    \"topic_name\": topic_name,\n                    \"ModelName\": model_name,\n                    \"ModelDescription\": model_desc,\n                    \"quality_score\": quality_score,\n                    \"recommendation\": recommendation\n                })\n\n        pattern_model_metadata = {\n            \"pattern\": \"model_metadata_issues\",\n            \"title\": \"Model Metadata Evaluation\",\n            \"description\": \"Checks whether each topic defines both ModelName and ModelDescription for clarity and discoverability. Missing or empty values reduce orchestration quality.\",\n            \"docs\": [\n                \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\"\n            ],\n            \"topics\": topics_missing_meta\n        }\n        pattern_model_metadata_quality = {\n            \"pattern\": \"model_metadata_quality\",\n            \"title\": \"Model Metadata Quality\",\n            \"description\": \"Evaluates whether ModelName and ModelDescription clearly explain the topic’s purpose, scope, or task intent. Generic or vague names/descriptions reduce agent clarity.\",\n            \"docs\": [\n                \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\",\n                \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions\"\n            ],\n            \"topics\": topics_metadata_quality\n        }\n\n        # --- 3. Input Descriptions Evaluation ---\n        logger.info(\"Checking input variables for missing descriptions\")\n        missing_input_desc_topics = []\n        missing_input_descriptions_count = 0\n        for topic in user_topics:\n            topic_name = topic.get(\"TopicName\", \"\")\n            inputs = topic.get(\"InputVariables\", [])\n            missing_inputs = []\n            if isinstance(inputs, list):\n                for inp in inputs:\n                    # Some are dicts, some are strings; extract \"description\", \"text\", else skip\n                    if isinstance(inp, dict):\n                        iname = inp.get(\"id\") or inp.get(\"text\") or inp.get(\"name\")\n                        desc = inp.get(\"description\", \"\")\n                        if iname and (desc is None or not str(desc).strip()):\n                            missing_inputs.append(str(iname))\n                    elif isinstance(inp, str):\n                        # No description possible if string only; count as missing\n                        missing_inputs.append(inp)\n            if missing_inputs:\n                missing_input_descriptions_count += 1\n                missing_input_desc_topics.append({\n                    \"topic_name\": topic_name,\n                    \"missing_inputs\": missing_inputs,\n                    \"recommendation\": \"Add concise descriptions for every input variable.\"\n                })\n\n        pattern_missing_input_desc = {\n            \"pattern\": \"missing_input_descriptions\",\n            \"title\": \"Missing Input Descriptions\",\n            \"description\": \"Each input variable should have a clear description explaining its purpose and format.\",\n            \"docs\": [\n                \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\"\n            ],\n            \"topics\": [\n                {\n                    \"topic_name\": t[\"topic_name\"],\n                    \"missing_inputs\": t[\"missing_inputs\"],\n                    \"recommendation\": t[\"recommendation\"]\n                }\n                for t in missing_input_desc_topics\n            ]\n        }\n\n        # --- Summary and scoring ---\n        topics_analyzed = len(user_topics)\n        failed_count = len(failed_components) if isinstance(failed_components, list) else 0\n\n        issues_summary = {\n            \"agent_instruction_quality\": agent_instruction_quality_issues,\n            \"missing_model_metadata\": missing_model_metadata_count,\n            \"model_metadata_quality\": poor_quality_meta_count,\n            \"missing_input_descriptions\": missing_input_descriptions_count,\n            \"insufficient_trigger_count\": 0,\n            \"single_trigger_phrase\": 0,\n            \"single_word_trigger\": 0,\n            \"long_trigger_phrases\": 0,\n            \"duplicate_or_similar_triggers\": 0,\n            \"oversized_conditions\": 0\n        }\n\n        # Scoring (total 100)\n        # - Agent Instructions (60%)\n        # - Model Metadata (25%)\n        # - Input Completeness (15%)\n        score_agent_instruction = 40\n        score_model_metadata = 30\n        score_inputs = 20\n        if agent_instruction_quality_issues &gt; 0:\n            score_agent_instruction = 10  # harsh penalty if problems\n        if missing_model_metadata_count &gt; 0:\n            score_model_metadata = max(0, 30 - 10 * missing_model_metadata_count)\n        if missing_input_descriptions_count &gt; 0:\n            score_inputs = max(0, 20 - 10 * missing_input_descriptions_count)\n\n        conditions_score = 0  # Not used in generative mode\n\n        # Rebalance to correct weights: agent_component should be out of 40, metadata 30, input 20, cond 10 (0 here)\n        agent_component = int(score_agent_instruction)  # out of 40\n        trigger_component = 0\n        inputs_component = int(score_inputs)  # out of 20\n        conditions_component = 0\n\n        # Overall, normalize to 100-point scale\n        overall_score = int(agent_component + trigger_component + inputs_component + conditions_component + score_model_metadata * 0.5)\n\n        # --- Patterns ---\n        patterns = [\n            pattern_agent_instruction,\n            pattern_model_metadata,\n            pattern_model_metadata_quality,\n            pattern_missing_input_desc\n        ]\n\n        # Compose result per required schema\n        output_json = {\n            \"BotId\": BotId,\n            \"BotName\": BotName,\n            \"IsGenerativeOrchestration\": IsGenerativeOrchestration,\n            \"overall_score\": overall_score,\n            \"score_breakdown\": {\n                \"agent_component\": agent_component,\n                \"trigger_component\": trigger_component,\n                \"inputs_component\": inputs_component,\n                \"conditions_component\": conditions_component\n            },\n            \"Summary\": {\n                \"topics_analyzed\": topics_analyzed,\n                \"failed_components\": failed_count,\n                \"issues_summary\": issues_summary\n            },\n            \"Patterns\": patterns\n        }\n\n        logger.info(\"Evaluation complete. Returning output.\")\n        return ExecutionResult(status_code=200, headers={}, body=output_json)\n","signature":"AQAAAK4AAADvu797Ikdlb2dyYXBoeSI6InVzIiwiRW52aXJvbm1lbnQiOiJwcm9kIiwiQ2x1c3RlcklkIjoiZXVzIiwiS2V5VmVyc2lvbiI6IjBiYTI0OWQ2ZDQyODRjYzQ4MTY5NmMwNjEyMTQwMjA1IiwiU2lnbmF0dXJlVmVyc2lvbiI6InYxIiwiU2lnbmF0dXJlRGF0ZUJpbmFyeSI6NTI1MDY1MDc4ODAxNjUzNDY2Mn0gAAAAaocTA7MS0vt1qdAzlJXGpmIvbqOgFFvcK5LcRTk4pZU="}</msdyn_customconfiguration>
          <msdyn_majoriterationnumber>2</msdyn_majoriterationnumber>
          <msdyn_minoriterationnumber>0</msdyn_minoriterationnumber>
          <msdyn_name>b141656b-8546-437a-968e-94cce6c8be1c_10/19/2025 1:22:38 PM</msdyn_name>
          <msdyn_modelrundataspecification>H4sIAAAAAAAACsVWTW8TMRD9K8jnHAAhDrn1g6JeCGoqrpZjT1KD117s2bah6n9ndp1tmngcUYJKTonn+c33cx7EvAV9EWKj8BvEZIMX03cTcenbDq9CwE8eLa7F9EGc29Q6tf6iGhBTISbiBDHaRYeQevNZaK0LKN+/PQdU1qXyzgbyZgRMxKxF8qicmC6VSzAR1+u2R86J2a/E40QoY2zGnAWPcI8l7UkBeU6MsdvynqoEHz+M7I/EP+vwpZnyUVxnx0UCS+tturkClfrS7t+6GKxvNmbmeqL4NXYRTI60p9iAZovvoHuffxz5acBLU+LyMeN83jWNiuujfNqUOkgy/QOqRGE5kHS0WkGU7U2kdpb3eNhTelRr1yfXUGSElLYfdWkg6WiHqWEm9wC24FUr8EjI3DnCyJ+dcmyGdWjB6gK5302JiZNFlZkHA042tIVGoaqHV8EVfOG2V45fYKQOPu8iExuLKrg2zbsL0YyJVDu8A6r2dzeLem/3cAUftalbLq22fc/GGuvQeUYMDmALXtO1zmqFIEOUyTbWqTjeYcp4GL7HPkgckuzqJBXJ4ZrKX1LuA4oQlyTXQ9+aNnhKiQmrhHChXKbP4CEqtLcwi/oGaPLpB6eMdegT8fVdyDo/BxxmR4cIchFB/TDhzh+lNXk1n9Kp7e4WUBRtO+WHaFhUwbUdoSpRCWEmmNTrYDQFgmtiv8jKOTmUm9/zrbkIgh6bDGReoeEb8w59VYgQs6hsjCcxqvVLGtpmjhI5Ghi/FqE5yil1V9sEtVLtmpkAIlArGvCmsiR7doZhVLcF7Y9so6JnRsNROfVFYSanPy38D/PSRkjstI2G6kJTZnk1MASXesHLUsWIeA1Z5YZba8BrkHCvmta9ak2yLFt0zEzkY6aTz/51MK/CMyN3N+jX7fm2T3/rchzcpQVn/kPw0rMq9cxW6Wz+/AbUDMwnWQ0AAA==</msdyn_modelrundataspecification>
          <msdyn_type>190690001</msdyn_type>
          <msdyn_aimodelid>{b141656b-8546-437a-968e-94cce6c8be1c}</msdyn_aimodelid>
          <msdyn_trainedmodelaiconfigurationpareid>{1f972f2e-c2ac-f011-bbd3-7c1e527d0405}</msdyn_trainedmodelaiconfigurationpareid>
          <statecode>2</statecode>
          <statuscode>7</statuscode>
          <IsCustomizable>1</IsCustomizable>
          <msdyn_templateversion>1</msdyn_templateversion>
        </AIConfiguration>
        <AIConfiguration>
          <msdyn_aiconfigurationid>{1f972f2e-c2ac-f011-bbd3-7c1e527d0405}</msdyn_aiconfigurationid>
          <msdyn_majoriterationnumber>1</msdyn_majoriterationnumber>
          <msdyn_minoriterationnumber>0</msdyn_minoriterationnumber>
          <msdyn_modeldata>b079f165-4465-4342-a56a-5be1666c6445</msdyn_modeldata>
          <msdyn_name>Stage B - Copilot Pattern Evaluation Prompt_10/19/2025 8:04:06 AM</msdyn_name>
          <msdyn_modelrundataspecification>
        {
          "schemaVersion": 2,
          "input": {},
          "output": {}
        }
      </msdyn_modelrundataspecification>
          <msdyn_type>190690000</msdyn_type>
          <msdyn_aimodelid>{b141656b-8546-437a-968e-94cce6c8be1c}</msdyn_aimodelid>
          <statecode>2</statecode>
          <statuscode>6</statuscode>
          <IsCustomizable>1</IsCustomizable>
          <msdyn_templateversion>1</msdyn_templateversion>
        </AIConfiguration>
      </AIConfigurations>
    </AIModel>
    <AIModel>
      <msdyn_aimodelid>{78f117f0-481a-4325-b6c1-aa3ac2487121}</msdyn_aimodelid>
      <msdyn_name>Stage A - Fetch Copilot Component Details</msdyn_name>
      <msdyn_templateid>{edfdb190-3791-45d8-9a6c-8f90a37c278a}</msdyn_templateid>
      <statecode>1</statecode>
      <statuscode>1</statuscode>
      <IsCustomizable>1</IsCustomizable>
      <msdyn_activerunconfigurationid>{84e5e8f8-efa2-4933-b91c-4f545db77d2e}</msdyn_activerunconfigurationid>
      <AIConfigurations>
        <AIConfiguration>
          <msdyn_aiconfigurationid>{84e5e8f8-efa2-4933-b91c-4f545db77d2e}</msdyn_aiconfigurationid>
          <msdyn_customconfiguration>{"version":"GptDynamicPrompt-2","prompt":[{"type":"literal","text":"**Role:**  \nYou normalize Copilot Studio bot and component data for orchestration evaluation.\n**Task:**  \nRead "},{"type":"data","id":"bot.componentidunique","text":"Copilot.Row id unique"},{"type":"data","id":"bot.name","text":"Copilot.Name"},{"type":"data","id":"bot.configuration","text":"Copilot.Configuration"},{"type":"data","id":"bot.botid","text":"Copilot.Bot"},{"type":"literal","text":" where Rowidunique is "},{"type":"inputVariable","id":"BotId"},{"type":"literal","text":" .\nAnd use it to Read all related "},{"type":"data","id":"botcomponent.name","text":"Copilot component.Name"},{"type":"data","id":"botcomponent.componenttype","text":"Copilot component.ComponentType"},{"type":"literal","text":" "},{"type":"data","id":"botcomponent.data","text":"Copilot component.Obi Data"},{"type":"literal","text":" \nFor query, use filter like for example - _parentbotid_value eq bb1b386f-072e-47a5-9c92-0a27b30e90bc.\nGracefully handle any \"unterminated f-string literal\" or related errors.\nAccept responses as dict with `value`, list, or single object.  \nRetry ≤ 3 times on HTTP ≥ 500 or parse errors (“unterminated f-string literal”).  \nIf `resp` is a coroutine: `if hasattr(resp,\"__await__\"): resp = resp.send(None)`  \nAlways check `resp` and `status_code` before use. No `asyncio`.\n\n\n**Prepare a JSON in below format** to be used in next steps\n```json\n{\n  \"bot\": {\n    \"name\": \"&lt;string&gt;\",\n    \"componentId\": \"&lt;guid&gt;\",\n    \"configuration\": \"&lt;string&gt;\",\n    \"botId\": \"&lt;guid&gt;\"\n  },\n  \"components\": [\n    { \"name\": \"&lt;string&gt;\", \"componentType\": \"&lt;number|string&gt;\", \"obiData\": \"&lt;string&gt;\" }\n  ]\n}\n\n1. Bot configuration parse\nFrom configuration, read:\n\"settings\": { \"GenerativeActionsEnabled\": true },\n\"recognizer\": { \"$kind\": \"GenerativeAIRecognizer\" }\n\nSet IsGenerativeOrchestration = true if either flag is true; else false.\n\n2. Component ObiData parse (YAML → JSON fallback)\nIf parse fails, skip component and record {componentId, reason:\"parse_error\"}.\nNormalize missing values to \"\" or [].\nSample Topic YAML (to guide field extraction):\n```YAML\nmodelDisplayName: \"Customer Feedback Analyzer\"\nmodelDescription: \"Analyzes feedback automatically.\"\nbeginDialog:\n  intent:\n    triggerQueries:\n      - \"analyze feedback\"\n      - \"customer sentiment\"\ninputType:\n  properties:\n    feedbackText:\n      description: \"Customer feedback text.\"\n    productId:\n      description: \"Product identifier.\"\nconditions:\n  - \"userProvidedFeedback == true\"\n\nExtract:\n - modelDisplayName → ModelName\n - modelDescription → ModelDescription\n- beginDialog.intent.triggerQueries or triggerPhrases → TriggerQueries[] \n  - Flatten to plain strings. \n  - Do NOT wrap in { \"item\": ... }.\n  - Output should look like [\"Hi\", \"Hello\", \"Good morning\"], not [{\"item\": \"Hi\"}].\n - inputType.properties → InputVariables[]\nEach property key = VariableName, and its description = VariableDescription.\nExample:\n```YAML\ninputType:\n  properties:\n    feedbackText:\n      description: \"Customer feedback text.\"\nbecomes\n```JSON\n\"InputVariables\": [\n  {\"VariableName\": \"feedbackText\", \"VariableDescription\": \"Customer feedback text.\"}\n]\n```\nAgent instruction extraction (one per bot):\n- Only Custom GPT components (componentType = 15) contains agent instructions. Extract the full string from the instructions key (or its variants) in ObiData and store it as AgentInstructions; otherwise leave empty.\n\nFor each successfully parsed component, append the extracted summary to its respective category in Components (Topics, Tools, or KnowledgeSources).\nEnsure that all lists (TriggerQueries, KnowledgeSources, Tools) are arrays of strings, \nnot arrays of objects or dictionaries.\n\n3. Grouping and Output Construction\n - Group components by type:\n  - componentType 9 → Components.Topics\n  - componentType 16 → Components.KnowledgeSources\n  - componentType 15 or 4 → Components.Tools\n - For each parsed component, append an entry to its group.\n - Each Topic entry must be structured as:\n```JSON\n{\n  \"TopicName\": \"&lt;component.name&gt;\",\n  \"ModelName\": \"&lt;modelDisplayName&gt;\",\n  \"ModelDescription\": \"&lt;modelDescription&gt;\",\n  \"TriggerQueries\": [\"&lt;string&gt;\", \"...\"],\n  \"Conditions\": [\"&lt;string&gt;\", \"...\"],\n  \"InputVariables\": [\n    { \"VariableName\": \"&lt;string&gt;\", \"VariableDescription\": \"&lt;string&gt;\" }\n  ]\n}\n\n\n4. Output JSON schema\n```JSON\n{\n  \"BotId\": \"&lt;guid&gt;\",\n  \"BotName\": \"&lt;string&gt;\",\n  \"IsGenerativeOrchestration\": true|false,\n  \"Agent Instructions\": \"&lt;string&gt;\",\n  \"Components\": {\n    \"Topics\": [ { ... } ],\n    \"KnowledgeSources\": [\"&lt;string&gt;\", \"...\"],\n    \"Tools\": [\"&lt;string&gt;\", \"...\"]\n  },\n  \"failed_components\": [\n    { \"componentId\": \"&lt;guid&gt;\", \"reason\": \"&lt;string&gt;\" }\n  ]\n}\nImportant - \n- Return the output exactly in the above JSON structure.\n- All array values must be flattened string lists (no nested objects).\n"}],"definitions":{"inputs":[{"id":"BotId","text":"BotId","type":"text","quickTestValue":"12643364-5b24-41c2-a95b-d0671076d828"}],"formulas":[],"data":[{"id":"bot","displayName":"Copilot","type":"dataverseTable","filters":[]},{"id":"botcomponent","displayName":"Copilot component","type":"dataverseTable","filters":[]}],"output":{"formats":["json"],"jsonSchema":{"type":"object","properties":{"IsGenerativeOrchestration":{"type":"boolean"},"BotId":{"type":"string"},"BotName":{"type":"string"},"Agent Instructions":{"type":"string"},"failed_components":{"type":"array"},"Components":{"type":"object","properties":{"Topics":{"type":"array","items":{"type":"object","properties":{"Conditions":{"type":"array"},"TopicName":{"type":"string"},"InputVariables":{"type":"array"},"TriggerQueries":{"type":"array"},"ModelDescription":{"type":"string"},"ModelName":{"type":"string"}},"required":["Conditions","TopicName","InputVariables","TriggerQueries","ModelDescription","ModelName"]}},"Tools":{"type":"array","items":{"type":"object","properties":{"item":{"type":"string"}},"required":["item"]}},"KnowledgeSources":{"type":"array","items":{"type":"object","properties":{"item":{"type":"string"}},"required":["item"]}}}}}},"jsonExamples":[{"IsGenerativeOrchestration":true,"BotId":"12643364-5b24-41c2-a95b-d0671076d828","BotName":"Energy Feedback Collector","Agent Instructions":"- Collect user feedback on taste, packaging, and energy boost.\n- Ensure feedback is gathered in a structured manner for easy analysis.\n- Do not collect personal information.","failed_components":[],"Components":{"Topics":[{"Conditions":[],"TopicName":"Sign in ","InputVariables":[],"TriggerQueries":[],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Escalate","InputVariables":[],"TriggerQueries":[{"item":"Talk to agent"},{"item":"Talk to a person"},{"item":"Talk to someone"},{"item":"Call back"},{"item":"Call customer service"},{"item":"Call me please"},{"item":"Call support"},{"item":"Call technical support"},{"item":"Can an agent call me"},{"item":"Can I call"},{"item":"Can I get in touch with someone else"},{"item":"Can I get real agent support"},{"item":"Can I get transferred to a person to call"},{"item":"Can I have a call in number Or can I be called"},{"item":"Can I have a representative call me"},{"item":"Can I schedule a call"},{"item":"Can I speak to a representative"},{"item":"Can I talk to a human"},{"item":"Can I talk to a human assistant"},{"item":"Can someone call me"},{"item":"Chat with a human"},{"item":"Chat with a representative"},{"item":"Chat with agent"},{"item":"Chat with someone please"},{"item":"Connect me to a live agent"},{"item":"Connect me to a person"},{"item":"Could some one contact me by phone"},{"item":"Customer agent"},{"item":"Customer representative"},{"item":"Customer service"},{"item":"I need a manager to contact me"},{"item":"I need customer service"},{"item":"I need help from a person"},{"item":"I need to speak with a live argent"},{"item":"I need to talk to a specialist please"},{"item":"I want to talk to customer service"},{"item":"I want to proceed with live support"},{"item":"I want to speak with a consultant"},{"item":"I want to speak with a live tech"},{"item":"I would like to speak with an associate"},{"item":"I would like to talk to a technician"},{"item":"Talk with tech support member"}],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Start Over","InputVariables":[],"TriggerQueries":[{"item":"let's begin again"},{"item":"start over"},{"item":"start again"},{"item":"restart"}],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Fallback","InputVariables":[],"TriggerQueries":[],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Greeting","InputVariables":[],"TriggerQueries":[{"item":"Good afternoon"},{"item":"Good morning"},{"item":"Hello"},{"item":"Hey"},{"item":"Hi"}],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Thank you","InputVariables":[],"TriggerQueries":[{"item":"thanks"},{"item":"thank you"},{"item":"thanks so much"},{"item":"ty"}],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Conversation Start","InputVariables":[],"TriggerQueries":[],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Multiple Topics Matched","InputVariables":[],"TriggerQueries":[],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Notify - Energy Drink Feedback","InputVariables":[],"TriggerQueries":[],"ModelDescription":"This action sends notification to a user asking for feedback for an energy drink.","ModelName":"Notify - Energy Drink Feedback with meaningful description"},{"Conditions":[],"TopicName":"Microsoft Dataverse - Dataverse MCP Server","InputVariables":[],"TriggerQueries":[],"ModelDescription":"Dataverse MCP Server. This server can be used to get information from Dataverse as well as get knowledge from Dataverse and various other tabular sources. To check what all sources this server can access, use the list_knowledge_sources tool. list_knowledge_sources responsds with the source and tables that this server can access. ","ModelName":"Dataverse MCP Server"},{"Conditions":[],"TopicName":"Conversational boosting","InputVariables":[],"TriggerQueries":[],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Goodbye","InputVariables":[],"TriggerQueries":[{"item":"Bye"},{"item":"Bye for now"},{"item":"Bye now"},{"item":"Good bye"},{"item":"No thank you. Goodbye."},{"item":"See you later"}],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Reset Conversation","InputVariables":[],"TriggerQueries":[],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"End of Conversation","InputVariables":[],"TriggerQueries":[],"ModelDescription":"","ModelName":""},{"Conditions":[],"TopicName":"Product Cost Specifier","InputVariables":[],"TriggerQueries":[{"item":"What is the cost of [product]?"},{"item":"How much does [product] cost?"},{"item":"Price of [product]"}],"ModelDescription":"This topic provides the cost of a product based on its name and quantity.","ModelName":""},{"Conditions":[],"TopicName":"On Error","InputVariables":[],"TriggerQueries":[],"ModelDescription":"","ModelName":""}],"Tools":[{"item":"Energy Feedback Collector"}],"KnowledgeSources":[{"item":"Technical Design Document draft v0.1.docx"}]}}]}},"modelParameters":{"modelType":"o3","gptParameters":{"temperature":1}},"settings":{"recordRetrievalLimit":30,"shouldPreserveRecordLinks":null,"runtime":"codeinterpreter"},"code":"\nimport logging\nimport re\nimport json\nfrom typing import Any, Dict, Optional, List, Union\n\nimport yaml\n\nfrom workerinterfaces import ExecutorInterface, ConnectorClient, HttpMethod, ExecutionResult\n\ndef try_parse_yaml_or_json(data: str) -&gt; Optional[dict]:\n    # Try YAML, fallback to JSON, else None.\n    if not data:\n        return None\n    try:\n        obj = yaml.safe_load(data)\n        if isinstance(obj, dict):\n            return obj\n    except Exception:\n        pass\n    try:\n        obj = json.loads(data)\n        if isinstance(obj, dict):\n            return obj\n    except Exception:\n        pass\n    return None\n\nclass PromptExecutor(ExecutorInterface):\n    async def execute(self, logger: logging.Logger, connector_client: ConnectorClient, input: Dict[str, Any]) -&gt; ExecutionResult:\n        # Sanitize BotId input for logging (only output truncated/obscured GUID)\n        bot_id = input.get(\"BotId\", \"\").strip()\n        bot_id_display = bot_id[:8] + \"...\" if len(bot_id) &gt;= 8 else \"[EMPTY]\"\n        logger.info(\"Starting orchestration normalization for BotId: %s\", bot_id_display)\n        output = {}\n\n        # --------------\n        # Helper: Retry wrapper for connector calls/parsing\n        async def safe_request(connector_name, method, path, query_params=None, content_type=None, body=None, max_retries=3):\n            attempt = 0\n            last_error = None\n            while attempt &lt; max_retries:\n                try:\n                    resp = await connector_client.make_request(\n                        connector_name, method, path, query_params, content_type, body\n                    )\n                    # Coroutine safety per prompt\n                    if hasattr(resp, \"__await__\"):\n                        resp = resp.send(None)\n                    if resp is not None and getattr(resp, \"status_code\", None) is not None:\n                        # Acceptable response\n                        if resp.status_code &gt;= 500:\n                            attempt += 1\n                            last_error = f\"HTTP {resp.status_code} error\"\n                            continue\n                        return resp\n                except Exception as ex:\n                    msg = str(ex)\n                    if \"unterminated f-string literal\" in msg:\n                        attempt += 1\n                        last_error = f\"Parse error: {msg}\"\n                        continue\n                    last_error = f\"Error: {msg}\"\n                    attempt += 1\n            logger.error(\"Failed after %d retries: %s\", attempt, last_error)\n            return None\n\n        # Helper for parsing ObiData\n        def parse_component_obidata(obi_data: str) -&gt; Optional[dict]:\n            if not obi_data:\n                return None\n            parsed = try_parse_yaml_or_json(obi_data)\n            return parsed\n\n        # Helper: Extract agent instructions from obi dict (various possible keys)\n        def get_agent_instructions(obi_data_dict: dict) -&gt; Optional[str]:\n            if not isinstance(obi_data_dict, dict):\n                return \"\"\n            for key in [\"instructions\", \"agentInstructions\", \"instruction\"]:\n                value = obi_data_dict.get(key)\n                if value and isinstance(value, str) and value.strip():\n                    return value.strip()\n            return \"\"\n\n        # Helper: Extract Topic fields per schema\n        def extract_topic_entry(component_name, obi_dict):\n            def get_model_name(obj):\n                # Sometimes modelDisplayName, sometimes modelName\n                return str(obj.get(\"modelDisplayName\") or obj.get(\"modelName\") or \"\")\n            def get_model_description(obj):\n                return str(obj.get(\"modelDescription\") or \"\")\n            def get_trigger_queries(obj):\n                out = []\n                dialog = obj.get(\"beginDialog\", {}).get(\"intent\", {})\n                # Preferred key\n                if isinstance(dialog, dict):\n                    triggers = dialog.get(\"triggerQueries\") or dialog.get(\"triggerPhrases\") or []\n                else:\n                    triggers = []\n                if not isinstance(triggers, list):\n                    triggers = [triggers] if triggers else []\n                # Flattening: Only strings, no objects\n                for t in triggers:\n                    if isinstance(t, str):\n                        out.append(t)\n                    elif isinstance(t, dict) and \"item\" in t and isinstance(t[\"item\"], str):\n                        out.append(t[\"item\"])\n                return out\n            def get_conditions(obj):\n                conds = obj.get(\"conditions\", [])\n                if isinstance(conds, list):\n                    return [str(c) for c in conds if c is not None]\n                elif isinstance(conds, str):\n                    return [conds]\n                return []\n            def get_input_vars(obj):\n                prop_obj = obj.get(\"inputType\", {}).get(\"properties\", {})\n                result = []\n                if isinstance(prop_obj, dict):\n                    for k, v in prop_obj.items():\n                        if isinstance(v, dict) and \"description\" in v:\n                            descr = str(v.get(\"description\", \"\"))\n                        else:\n                            descr = \"\"\n                        result.append({\"VariableName\": k, \"VariableDescription\": descr})\n                return result\n            # Return dict per schema\n            return {\n                \"TopicName\": component_name or \"\",\n                \"ModelName\": get_model_name(obi_dict),\n                \"ModelDescription\": get_model_description(obi_dict),\n                \"TriggerQueries\": get_trigger_queries(obi_dict),\n                \"Conditions\": get_conditions(obi_dict),\n                \"InputVariables\": get_input_vars(obi_dict),\n            }\n\n        # Main Output Accumulators\n        output_bot_id = \"\"\n        output_bot_name = \"\"\n        output_agent_instructions = \"\"\n        is_generative_orchestration = False\n        failed_components: List[Dict[str, Any]] = []\n        components_topics = []\n        components_tools = []\n        components_knowledgesources = []\n\n        # Step 1: Query bots for matching BotId\n        logger.info(\"Fetching bot record with componentidunique == %s\", bot_id)\n        bot_select_cols = [\n            \"componentidunique\", \"name\", \"configuration\", \"botid\"\n        ]\n        bot_query_params = {\n            \"$select\": \",\".join(bot_select_cols),\n            \"$filter\": f\"componentidunique eq {bot_id}\"\n        }\n        bot_resp = await safe_request(\n            \"dataverse\", HttpMethod.GET, \"/api/data/v9.2/bots\", bot_query_params\n        )\n        # Bot response must be valid\n        if not bot_resp or bot_resp.status_code != 200 or not getattr(bot_resp, \"body\", None):\n            return ExecutionResult(\n                status_code=500,\n                headers={},\n                body={\"error\": f\"Bot with componentidunique={bot_id_display} not found or error response\"}\n            )\n        # Acceptable body: dict with \"value\" (list), single obj, or list\n        bot_records = bot_resp.body\n        # Normalize to list\n        if isinstance(bot_records, dict) and \"value\" in bot_records:\n            bot_records = bot_records[\"value\"]\n        elif isinstance(bot_records, dict):\n            bot_records = [bot_records]\n        elif isinstance(bot_records, list):\n            pass\n        else:\n            bot_records = []\n        if not bot_records or not isinstance(bot_records, list):\n            return ExecutionResult(\n                status_code=500,\n                headers={},\n                body={\"error\": f\"Bot with componentidunique={bot_id_display} not found in result set\"}\n            )\n        bot_record = bot_records[0]\n        output_bot_id = str(bot_record.get(\"botid\", \"\")) or \"\"\n        output_bot_name = str(bot_record.get(\"name\", \"\")) or \"\"\n        bot_configuration_str = str(bot_record.get(\"configuration\", \"\")) or \"\"\n        # Step 2: Parse bot.configuration for flags\n        logger.info(\"Parsing bot configuration\")\n        config_obj = None\n        if bot_configuration_str:\n            # Remove leading/trailing whitespace and any BOM\n            s = bot_configuration_str.strip().lstrip('\\ufeff')\n            try:\n                config_obj = json.loads(s)\n            except Exception:\n                try:\n                    config_obj = yaml.safe_load(s)\n                except Exception:\n                    config_obj = None\n        # Check orchestration flags\n        try:\n            gen_actions = bool(config_obj and isinstance(config_obj, dict) and\n                               config_obj.get(\"settings\", {}).get(\"GenerativeActionsEnabled\", False))\n            recog_kind = str(config_obj.get(\"recognizer\", {}).get(\"$kind\", \"\")) if config_obj else \"\"\n            if gen_actions or recog_kind == \"GenerativeAIRecognizer\":\n                is_generative_orchestration = True\n            else:\n                is_generative_orchestration = False\n        except Exception:\n            is_generative_orchestration = False\n\n        # Step 3: Query botcomponents for _parentbotid_value == bot_id\n        logger.info(\"Fetching bot components for parentbotid: %s\", bot_id)\n        comp_select_cols = [\n            \"botcomponentid\", \"name\", \"componenttype\", \"data\"\n        ]\n        comp_query_params = {\n            \"$select\": \",\".join(comp_select_cols),\n            \"$filter\": f\"_parentbotid_value eq {bot_id}\"\n        }\n        comp_resp = await safe_request(\n            \"dataverse\", HttpMethod.GET, \"/api/data/v9.2/botcomponents\", comp_query_params\n        )\n        if not comp_resp or not hasattr(comp_resp, \"body\") or comp_resp.status_code != 200:\n            logger.warning(\"No components found or error for parentbotid: %s\", bot_id)\n            comp_records = []\n        else:\n            comp_records = comp_resp.body\n            # Normalize body to list\n            if isinstance(comp_records, dict) and \"value\" in comp_records:\n                comp_records = comp_records[\"value\"]\n            elif isinstance(comp_records, dict):\n                comp_records = [comp_records]\n            elif isinstance(comp_records, list):\n                pass\n            else:\n                comp_records = []\n\n        # Allow for agent instructions to be set from Custom GPT component only (componentType == 15)\n        agent_instructions_found = False\n\n        # Step 4: Process each component\n        for comp in (comp_records or []):\n            component_id = str(comp.get(\"botcomponentid\", \"\")) or \"\"\n            component_name = str(comp.get(\"name\", \"\")) or \"\"\n            try:\n                component_type = comp.get(\"componenttype\", None)\n                if isinstance(component_type, str) and component_type.isdigit():\n                    component_type = int(component_type)\n                elif isinstance(component_type, int):\n                    pass\n                else:\n                    # fallback: Component type not found/malformed\n                    component_type = -1\n                obi_data_str = str(comp.get(\"data\", \"\") or \"\")\n            except Exception:\n                # Malformed component, skip\n                failed_components.append({\"componentId\": component_id, \"reason\": \"malformed_component\"})\n                continue\n            obi_dict = parse_component_obidata(obi_data_str)\n            if not obi_dict:\n                failed_components.append({\"componentId\": component_id, \"reason\": \"parse_error\"})\n                continue\n\n            # Check and extract Agent Instructions if Custom GPT\n            if not agent_instructions_found and component_type == 15:\n                agent_instr = get_agent_instructions(obi_dict)\n                if agent_instr:\n                    output_agent_instructions = agent_instr\n                    agent_instructions_found = True\n\n            # Group and process entry\n            if component_type == 9:\n                # Topic\n                topic_entry = extract_topic_entry(component_name, obi_dict)\n                components_topics.append(topic_entry)\n            elif component_type == 16:\n                components_knowledgesources.append(component_name)\n            elif component_type == 15 or component_type == 4:\n                components_tools.append(component_name)\n            else:\n                # Ungrouped type -- per prompt, skip.\n                pass\n\n        # Step 5: Flatten lists as required\n        # (No nested object for knowledge sources and tools; must be flat list of strings.)\n        topics_out = components_topics if components_topics else []\n        knowledgesources_out = components_knowledgesources if components_knowledgesources else []\n        tools_out = components_tools if components_tools else []\n\n        output_dict = {\n            \"BotId\": output_bot_id,\n            \"BotName\": output_bot_name,\n            \"IsGenerativeOrchestration\": is_generative_orchestration,\n            \"Agent Instructions\": output_agent_instructions,\n            \"Components\": {\n                \"Topics\": topics_out,\n                \"KnowledgeSources\": knowledgesources_out,\n                \"Tools\": tools_out\n            },\n            \"failed_components\": failed_components\n        }\n\n        logger.info(\"Successfully constructed output JSON for BotId: %s\", bot_id_display)\n        return ExecutionResult(status_code=200, headers={}, body=output_dict)\n","signature":"AQAAAK4AAADvu797Ikdlb2dyYXBoeSI6InVzIiwiRW52aXJvbm1lbnQiOiJwcm9kIiwiQ2x1c3RlcklkIjoiZXVzIiwiS2V5VmVyc2lvbiI6IjBiYTI0OWQ2ZDQyODRjYzQ4MTY5NmMwNjEyMTQwMjA1IiwiU2lnbmF0dXJlVmVyc2lvbiI6InYxIiwiU2lnbmF0dXJlRGF0ZUJpbmFyeSI6NTI1MDY1MDY5MDU3ODExNjkxM30gAAAA2TGZJcKcYtc5jrbBz4rz00thnHogGaH5I/v2/qAwl9I="}</msdyn_customconfiguration>
          <msdyn_majoriterationnumber>5</msdyn_majoriterationnumber>
          <msdyn_minoriterationnumber>0</msdyn_minoriterationnumber>
          <msdyn_name>78f117f0-481a-4325-b6c1-aa3ac2487121_10/19/2025 10:40:15 AM</msdyn_name>
          <msdyn_modelrundataspecification>H4sIAAAAAAAACqVUXU+DMBT9K0ufeTExPvDGNmeIUeLAvZoO7lgNtKS9OMmy/25p0S22ixJ4gp5zzz33gx5J2kC+ErKmuAGpmOAkvAlIzJsW10LgPUeGHQmPZMlUU9HumdZAQkICEiFKtm0RVA/PBcaFy7PHAUka1Nq0IuGOVgoCknVNj6dag5fkFBBaFMxyFoIjfKIrFjmUS2GU7Vl3ThXc3X6rn7R+0uLYmvwuMpvYKWDHOFP7NVDVN/F31MqgswH2hCvtP8dWQmGd9hIDKdm+Q97n/LfzWD0AB0mRfUAi8z1odf3hM3ad+mMyOwjb5hSwt/rHrJ3SNGApngjz5omJSuA4i7lti86tPPvgcnxzoayC4i0XdSO4DjBCAyuSknYjGms2aeFTGj+jTDQsn2JGG+H2h5hckvHin9EZ8vTW3BMbKhndVjDdhWRlCfKlBcmmqz2JAqolqFwys7xumMPwVGg4/s6cISduaKqoJs2XIdQuzZz6Mz5ycdC7XkIqWplPauHY5PYJSEGRvirwXA9LjcwMdPXWvtD7As3MHcOaBgAA</msdyn_modelrundataspecification>
          <msdyn_type>190690001</msdyn_type>
          <msdyn_aimodelid>{78f117f0-481a-4325-b6c1-aa3ac2487121}</msdyn_aimodelid>
          <msdyn_trainedmodelaiconfigurationpareid>{7a652eeb-3bac-f011-bbd3-6045bdef4136}</msdyn_trainedmodelaiconfigurationpareid>
          <statecode>2</statecode>
          <statuscode>7</statuscode>
          <IsCustomizable>1</IsCustomizable>
          <msdyn_templateversion>1</msdyn_templateversion>
        </AIConfiguration>
        <AIConfiguration>
          <msdyn_aiconfigurationid>{7a652eeb-3bac-f011-bbd3-6045bdef4136}</msdyn_aiconfigurationid>
          <msdyn_majoriterationnumber>1</msdyn_majoriterationnumber>
          <msdyn_minoriterationnumber>0</msdyn_minoriterationnumber>
          <msdyn_modeldata>fed8b387-6341-4f66-a6f6-b666a6a56c70</msdyn_modeldata>
          <msdyn_name>Stage A - Fetch Copilot Component Details_10/18/2025 4:03:02 PM</msdyn_name>
          <msdyn_modelrundataspecification>
        {
          "schemaVersion": 2,
          "input": {},
          "output": {}
        }
      </msdyn_modelrundataspecification>
          <msdyn_type>190690000</msdyn_type>
          <msdyn_aimodelid>{78f117f0-481a-4325-b6c1-aa3ac2487121}</msdyn_aimodelid>
          <statecode>2</statecode>
          <statuscode>6</statuscode>
          <IsCustomizable>1</IsCustomizable>
          <msdyn_templateversion>1</msdyn_templateversion>
        </AIConfiguration>
      </AIConfigurations>
    </AIModel>
    <AIModel>
      <msdyn_aimodelid>{6a468cc0-f628-43b3-93c4-d003f1536678}</msdyn_aimodelid>
      <msdyn_name>Stage C - Agent Review Report Generation</msdyn_name>
      <msdyn_templateid>{edfdb190-3791-45d8-9a6c-8f90a37c278a}</msdyn_templateid>
      <statecode>1</statecode>
      <statuscode>1</statuscode>
      <IsCustomizable>1</IsCustomizable>
      <msdyn_activerunconfigurationid>{4ede5bed-2dd3-48d6-9d18-c8a76efb8a2d}</msdyn_activerunconfigurationid>
      <AIConfigurations>
        <AIConfiguration>
          <msdyn_aiconfigurationid>{4ede5bed-2dd3-48d6-9d18-c8a76efb8a2d}</msdyn_aiconfigurationid>
          <msdyn_customconfiguration>{"version":"GptDynamicPrompt-2","prompt":[{"type":"literal","text":"#### Role:\nYou prepare a Copilot Studio Agent Review Report as a structured document in plain text format suitable for PDF generation.\n\n#### Task:\nUsing the outputs from Stage A (extracted data) and Stage B (evaluation results),\ngenerate a clearly structured markdown-style report explaining both:\n1. The "},{"type":"inputVariable","id":"Review_20Results"},{"type":"literal","text":"  (summary and evaluation insights), and  \n2. The  "},{"type":"inputVariable","id":"Extraction_20Details"},{"type":"literal","text":" (bot components and metadata from Stage A).\n\nThe report should be easy to read when converted to PDF, with clear sections, tables, and bullet points.\n\n---\n\n### PDF Report Structure\n\nThe report must follow the structure shown below:\n\n---\n\n## Copilot Studio Agent Review Report\n\n**Agent Name:** {{BotName}}  \n**Bot ID:** {{BotId}}  \n**Overall Score:** {{overall_score}} / 100  \n**Evaluation Type:** {{Generative Orchestration / Classic}}  \n**Rating:** {{Needs Improvement / Moderate / Excellent}}\n\n---\n\n### 1. Review Summary\n\nProvide a 3–5 line overview of the Copilot agent’s overall performance.  \nInclude:\n- Key strengths and weaknesses  \n- Whether the agent is orchestration-based or classic  \n- A quick summary of what to improve next\n\nExample:\n&gt; The Energy Feedback Collector agent demonstrates strong topic coverage and stable orchestration flow.\n&gt; However, model descriptions are missing and agent instructions lack context on tool usage.\n\n---\n\n### 2. Evaluation Summary (Scores)\n\nProvide a markdown table showing individual criteria scores and remarks.\n\n| Evaluation Area | Score (0–5) | Remarks |\n|-----------------|-------------|----------|\n| Purpose &amp; Clarity | 3 | Clear overall intent but missing context |\n| Actionability | 4 | Provides actionable outcomes |\n| Tool Fit | 2 | Tool usage not referenced |\n| Constraints &amp; Safety | 5 | Proper boundaries defined |\n| Structure &amp; Readability | 3 | Needs consistent naming |\n\nBelow the table, show the **Total Weighted Score** as:\n**Overall Score:** {{overall_score}} / 100\n\n---\n\n### 3. Agent Instruction Evaluation\n\nExplain how well the AgentInstructions follow Copilot best practices.\n\n**Pattern:** agent_instruction_issues  \n**Quality Rating:** {{too_short / vague / good}}  \n**Findings:**\n- Missing: {{missing_best_practices}}  \n- Mentions tools/topics: {{true/false}}  \n- Recommendation: {{recommendation}}\n\nReference links (always include these):\n- https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions  \n- https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance  \n- https://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/declarative-agent-instructions  \n\n---\n\n### 4. Model Metadata Evaluation\n\nProvide two tables:\n1. **Missing Model Metadata**\n   - Topics missing ModelName or ModelDescription.\n2. **Model Metadata Quality**\n   - Topics with vague or short descriptions.\n\n#### Example Table: Missing Model Metadata\n\n| Topic Name | Missing Fields |\n|-------------|----------------|\n| Greeting | ModelName, ModelDescription |\n| Thank you | ModelDescription |\n\n#### Example Table: Metadata Quality\n\n| Topic Name | Model Name | Model Description | Quality | Recommendation |\n|-------------|-------------|------------------|----------|----------------|\n| Notify - Energy Drink Feedback | Good | Detailed | Good | None |\n| Greeting | Missing | Missing | Poor | Add model name and description |\n\nReference:\n- https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance  \n- https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions  \n\n---\n\n### 5. Topic Trigger Evaluation (Classic Agents Only)\n\nOnly include if **IsGenerativeOrchestration = false**.\n\nUse a table format showing patterns and recommendations:\n\n| Pattern | Description | Example Topics | Recommendation |\n|----------|--------------|----------------|----------------|\n| Insufficient Trigger Count | Fewer than 5 triggers | Greeting | Add more triggers |\n| Long Trigger Phrase | Triggers &gt;10 words | Escalate | Simplify phrasing |\n| Duplicate Triggers | Similar or repeated phrases | Thank you | Remove redundancy |\n\nReference:\n- https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\n\n---\n\n### 6. Tools and Knowledge Sources\n\nList the tools and knowledge sources extracted from Stage A.\n\n| Type | Name | Evaluation | Recommendation |\n|------|------|-------------|----------------|\n| Tool | Energy Feedback Collector | Well defined | Maintain |\n| Knowledge Source | Technical Design Document draft v0.1.docx | Single source | Add more sources |\n\n---\n\n### 7. Consolidated Recommendations\n\nProvide a bullet list combining all actionable recommendations found during evaluation.\nList the most critical issues first.\n\nExample:\n- Add more detailed Agent Instructions that reference tools and use cases.\n- Improve topic metadata (ModelName and ModelDescription) for clarity.\n- Reduce overly long trigger phrases in classic topics.\n- Add missing input descriptions for variables.\n\n---\n\n### 8. Extraction Details\n\nSummarize what was extracted in Stage A (from the YAML/JSON parsing).\n\n- Is Generative Orchestration: {{true/false}}  \n- Total Topics Analyzed: {{number}}  \n- Tools Count: {{number}}  \n- Knowledge Sources Count: {{number}}  \n- Failed Components: {{number}}\n\nProvide a compact table for topics overview:\n\n| Topic Name | Triggers Count | Conditions Count | Input Variables | Model Description Present |\n|-------------|----------------|------------------|-----------------|----------------------------|\n| Greeting | 5 | 0 | 0 | No |\n| Notify - Energy Drink Feedback | 0 | 0 | 0 | Yes |\n\n---\n\n### 9. Footer\n\nAdd a closing statement:\n&gt; *Generated automatically by Copilot Studio Review Tool. This report summarizes extracted configuration and orchestration evaluation results.*\n\n---\n\n### General Formatting Rules\n- Use markdown headers (`##`, `###`) and tables.\n- No HTML, emojis, or special characters.\n- Keep text concise and professional.\n- The document must be self-contained — no external styling or dependencies.\n- Should be formal document\n\n---\n\n### Output Requirement\n\nThe final output should be a **PDF document** generated from the defined structure above.  \nThe PDF must include:\n- Proper section headings, tables, and bullet points as described.  \n- Clean spacing and alignment for readability.  \n- No raw JSON or code fences.  \n- A professional, printable layout consistent with the markdown structure provided.  \n\nEnsure the report is self-contained and ready for download or archival as a PDF file named:  \n**Copilot_Agent_Review_Report_&lt;BotName&gt;.pdf**\n"}],"definitions":{"inputs":[{"id":"Review_20Results","text":"Review Results","type":"text","quickTestValue":"{\n  \"BotId\": \"12643364-5b24-41c2-a95b-d0671076d828\",\n  \"Summary\": {\n    \"issues_summary\": {\n      \"single_trigger_phrase\": 0,\n      \"missing_input_descriptions\": 0,\n      \"agent_instruction_quality\": 3,\n      \"long_trigger_phrases\": 0,\n      \"model_metadata_quality\": 6,\n      \"oversized_conditions\": 0,\n      \"single_word_trigger\": 0,\n      \"missing_model_metadata\": 6,\n      \"insufficient_trigger_count\": 0,\n      \"duplicate_or_similar_triggers\": 0\n    },\n    \"topics_analyzed\": 8,\n    \"failed_components\": 0\n  },\n  \"IsGenerativeOrchestration\": true,\n  \"score_breakdown\": {\n    \"agent_component\": 12,\n    \"conditions_component\": 10,\n    \"trigger_component\": 0,\n    \"inputs_component\": 20\n  },\n  \"overall_score\": 42,\n  \"BotName\": \"Energy Feedback Collector\",\n  \"Patterns\": [\n    {\n      \"pattern\": \"agent_instruction_issues\",\n      \"items\": [\n        {\n          \"concise_score\": \"too_short\",\n          \"recommendation\": \"AgentInstructions should be longer, clearer, and cover context. Add explicit references to bot tools or topics. Add concise examples to AgentInstructions.\",\n          \"missing_best_practices\": [\n            {\n              \"item\": \"missing_clarity\"\n            },\n            {\n              \"item\": \"no_tool_or_topic_reference\"\n            },\n            {\n              \"item\": \"no_examples\"\n            }\n          ],\n          \"present\": false,\n          \"mentions_tools_or_topics\": false,\n          \"evidence_examples\": [\n            {\n              \"item\": \"\"\n            }\n          ]\n        }\n      ],\n      \"title\": \"Agent Instruction Evaluation\",\n      \"description\": \"Assesses the bot’s AgentInstructions for clarity, completeness, and adherence to Copilot Studio best practices.\",\n      \"docs\": [\n        {\n          \"item\": \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions\"\n        },\n        {\n          \"item\": \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\"\n        },\n        {\n          \"item\": \"https://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/declarative-agent-instructions\"\n        }\n      ]\n    },\n    {\n      \"pattern\": \"model_metadata_issues\",\n      \"title\": \"Model Metadata Evaluation\",\n      \"description\": \"Checks whether each topic defines both ModelName and ModelDescription for clarity and discoverability. Missing or empty values reduce orchestration quality.\",\n      \"topics\": [\n        {\n          \"missing_fields\": [\n            {\n              \"item\": \"ModelName\"\n            },\n            {\n              \"item\": \"ModelDescription\"\n            }\n          ],\n          \"topic_name\": \"Sign in \"\n        },\n        {\n          \"missing_fields\": [\n            {\n              \"item\": \"ModelName\"\n            },\n            {\n              \"item\": \"ModelDescription\"\n            }\n          ],\n          \"topic_name\": \"Start Over\"\n        },\n        {\n          \"missing_fields\": [\n            {\n              \"item\": \"ModelName\"\n            },\n            {\n              \"item\": \"ModelDescription\"\n            }\n          ],\n          \"topic_name\": \"Greeting\"\n        },\n        {\n          \"missing_fields\": [\n            {\n              \"item\": \"ModelName\"\n            },\n            {\n              \"item\": \"ModelDescription\"\n            }\n          ],\n          \"topic_name\": \"Thank you\"\n        },\n        {\n          \"missing_fields\": [\n            {\n              \"item\": \"ModelName\"\n            },\n            {\n              \"item\": \"ModelDescription\"\n            }\n          ],\n          \"topic_name\": \"Goodbye\"\n        },\n        {\n          \"missing_fields\": [\n            {\n              \"item\": \"ModelName\"\n            }\n          ],\n          \"topic_name\": \"Product Cost Specifier\"\n        }\n      ],\n      \"docs\": [\n        {\n          \"item\": \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\"\n        }\n      ]\n    },\n    {\n      \"pattern\": \"model_metadata_quality\",\n      \"title\": \"Model Metadata Quality\",\n      \"description\": \"Evaluates whether ModelName and ModelDescription clearly explain the topic’s purpose, scope, or task intent. Generic or vague names/descriptions reduce agent clarity.\",\n      \"topics\": [\n        {\n          \"recommendation\": \"Add ModelName and ModelDescription.\",\n          \"quality_score\": \"missing\",\n          \"topic_name\": \"Sign in \",\n          \"ModelDescription\": \"\",\n          \"ModelName\": \"\"\n        },\n        {\n          \"recommendation\": \"Add ModelName and ModelDescription.\",\n          \"quality_score\": \"missing\",\n          \"topic_name\": \"Start Over\",\n          \"ModelDescription\": \"\",\n          \"ModelName\": \"\"\n        },\n        {\n          \"recommendation\": \"Add ModelName and ModelDescription.\",\n          \"quality_score\": \"missing\",\n          \"topic_name\": \"Greeting\",\n          \"ModelDescription\": \"\",\n          \"ModelName\": \"\"\n        },\n        {\n          \"recommendation\": \"Add ModelName and ModelDescription.\",\n          \"quality_score\": \"missing\",\n          \"topic_name\": \"Thank you\",\n          \"ModelDescription\": \"\",\n          \"ModelName\": \"\"\n        },\n        {\n          \"recommendation\": \"\",\n          \"quality_score\": \"good\",\n          \"topic_name\": \"Notify - Energy Drink Feedback\",\n          \"ModelDescription\": \"This action sends notification to a user asking for feedback for an energy drink.\",\n          \"ModelName\": \"Notify - Energy Drink Feedback with meaningful description\"\n        },\n        {\n          \"recommendation\": \"\",\n          \"quality_score\": \"good\",\n          \"topic_name\": \"Microsoft Dataverse - Dataverse MCP Server\",\n          \"ModelDescription\": \"Dataverse MCP Server. This server can be used to get information from Dataverse as well as get knowledge from Dataverse and various other tabular sources. To check what all sources this server can access, use the list_knowledge_sources tool. list_knowledge_sources responsds with the source and tables that this server can access. \",\n          \"ModelName\": \"Dataverse MCP Server\"\n        },\n        {\n          \"recommendation\": \"Add ModelName and ModelDescription.\",\n          \"quality_score\": \"missing\",\n          \"topic_name\": \"Goodbye\",\n          \"ModelDescription\": \"\",\n          \"ModelName\": \"\"\n        },\n        {\n          \"recommendation\": \"Add ModelName and ModelDescription.\",\n          \"quality_score\": \"missing\",\n          \"topic_name\": \"Product Cost Specifier\",\n          \"ModelDescription\": \"This topic provides the cost of a product based on its name and quantity.\",\n          \"ModelName\": \"\"\n        }\n      ],\n      \"docs\": [\n        {\n          \"item\": \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\"\n        },\n        {\n          \"item\": \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions\"\n        }\n      ]\n    },\n    {\n      \"pattern\": \"missing_input_descriptions\",\n      \"title\": \"Missing Input Descriptions\",\n      \"description\": \"Each input variable should have a clear description explaining its purpose and format.\",\n      \"topics\": [],\n      \"docs\": [\n        {\n          \"item\": \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\"\n        }\n      ]\n    },\n    {\n      \"pattern\": \"oversized_conditions\",\n      \"title\": \"Oversized Condition Blocks\",\n      \"description\": \"Topics with more than 15 conditions may indicate overly complex logic and should be modularized.\",\n      \"topics\": [],\n      \"docs\": [\n        {\n          \"item\": \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/trigger-phrases-best-practices\"\n        }\n      ]\n    }\n  ]\n}"},{"id":"Extraction_20Details","text":"Extraction Details","type":"text","quickTestValue":"{\n  \"IsGenerativeOrchestration\": true,\n  \"BotId\": \"12643364-5b24-41c2-a95b-d0671076d828\",\n  \"BotName\": \"Energy Feedback Collector\",\n  \"Agent Instructions\": \"- Collect user feedback on taste, packaging, and energy boost.\\n- Ensure feedback is gathered in a structured manner for easy analysis.\\n- Do not collect personal information.\",\n  \"failed_components\": [],\n  \"Components\": {\n    \"Topics\": [\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Sign in \",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Escalate\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"Talk to agent\"\n          },\n          {\n            \"item\": \"Talk to a person\"\n          },\n          {\n            \"item\": \"Talk to someone\"\n          },\n          {\n            \"item\": \"Call back\"\n          },\n          {\n            \"item\": \"Call customer service\"\n          },\n          {\n            \"item\": \"Call me please\"\n          },\n          {\n            \"item\": \"Call support\"\n          },\n          {\n            \"item\": \"Call technical support\"\n          },\n          {\n            \"item\": \"Can an agent call me\"\n          },\n          {\n            \"item\": \"Can I call\"\n          },\n          {\n            \"item\": \"Can I get in touch with someone else\"\n          },\n          {\n            \"item\": \"Can I get real agent support\"\n          },\n          {\n            \"item\": \"Can I get transferred to a person to call\"\n          },\n          {\n            \"item\": \"Can I have a call in number Or can I be called\"\n          },\n          {\n            \"item\": \"Can I have a representative call me\"\n          },\n          {\n            \"item\": \"Can I schedule a call\"\n          },\n          {\n            \"item\": \"Can I speak to a representative\"\n          },\n          {\n            \"item\": \"Can I talk to a human\"\n          },\n          {\n            \"item\": \"Can I talk to a human assistant\"\n          },\n          {\n            \"item\": \"Can someone call me\"\n          },\n          {\n            \"item\": \"Chat with a human\"\n          },\n          {\n            \"item\": \"Chat with a representative\"\n          },\n          {\n            \"item\": \"Chat with agent\"\n          },\n          {\n            \"item\": \"Chat with someone please\"\n          },\n          {\n            \"item\": \"Connect me to a live agent\"\n          },\n          {\n            \"item\": \"Connect me to a person\"\n          },\n          {\n            \"item\": \"Could some one contact me by phone\"\n          },\n          {\n            \"item\": \"Customer agent\"\n          },\n          {\n            \"item\": \"Customer representative\"\n          },\n          {\n            \"item\": \"Customer service\"\n          },\n          {\n            \"item\": \"I need a manager to contact me\"\n          },\n          {\n            \"item\": \"I need customer service\"\n          },\n          {\n            \"item\": \"I need help from a person\"\n          },\n          {\n            \"item\": \"I need to speak with a live argent\"\n          },\n          {\n            \"item\": \"I need to talk to a specialist please\"\n          },\n          {\n            \"item\": \"I want to talk to customer service\"\n          },\n          {\n            \"item\": \"I want to proceed with live support\"\n          },\n          {\n            \"item\": \"I want to speak with a consultant\"\n          },\n          {\n            \"item\": \"I want to speak with a live tech\"\n          },\n          {\n            \"item\": \"I would like to speak with an associate\"\n          },\n          {\n            \"item\": \"I would like to talk to a technician\"\n          },\n          {\n            \"item\": \"Talk with tech support member\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Start Over\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"let's begin again\"\n          },\n          {\n            \"item\": \"start over\"\n          },\n          {\n            \"item\": \"start again\"\n          },\n          {\n            \"item\": \"restart\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Fallback\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Greeting\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"Good afternoon\"\n          },\n          {\n            \"item\": \"Good morning\"\n          },\n          {\n            \"item\": \"Hello\"\n          },\n          {\n            \"item\": \"Hey\"\n          },\n          {\n            \"item\": \"Hi\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Thank you\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"thanks\"\n          },\n          {\n            \"item\": \"thank you\"\n          },\n          {\n            \"item\": \"thanks so much\"\n          },\n          {\n            \"item\": \"ty\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Conversation Start\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Multiple Topics Matched\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Notify - Energy Drink Feedback\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"This action sends notification to a user asking for feedback for an energy drink.\",\n        \"ModelName\": \"Notify - Energy Drink Feedback with meaningful description\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Microsoft Dataverse - Dataverse MCP Server\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"Dataverse MCP Server. This server can be used to get information from Dataverse as well as get knowledge from Dataverse and various other tabular sources. To check what all sources this server can access, use the list_knowledge_sources tool. list_knowledge_sources responsds with the source and tables that this server can access. \",\n        \"ModelName\": \"Dataverse MCP Server\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Conversational boosting\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Goodbye\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"Bye\"\n          },\n          {\n            \"item\": \"Bye for now\"\n          },\n          {\n            \"item\": \"Bye now\"\n          },\n          {\n            \"item\": \"Good bye\"\n          },\n          {\n            \"item\": \"No thank you. Goodbye.\"\n          },\n          {\n            \"item\": \"See you later\"\n          }\n        ],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Reset Conversation\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"End of Conversation\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"Product Cost Specifier\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [\n          {\n            \"item\": \"What is the cost of [product]?\"\n          },\n          {\n            \"item\": \"How much does [product] cost?\"\n          },\n          {\n            \"item\": \"Price of [product]\"\n          }\n        ],\n        \"ModelDescription\": \"This topic provides the cost of a product based on its name and quantity.\",\n        \"ModelName\": \"\"\n      },\n      {\n        \"Conditions\": [],\n        \"TopicName\": \"On Error\",\n        \"InputVariables\": [],\n        \"TriggerQueries\": [],\n        \"ModelDescription\": \"\",\n        \"ModelName\": \"\"\n      }\n    ],\n    \"Tools\": [\n      {\n        \"item\": \"Energy Feedback Collector\"\n      }\n    ],\n    \"KnowledgeSources\": [\n      {\n        \"item\": \"Technical Design Document draft v0.1.docx\"\n      }\n    ]\n  }\n}"}],"formulas":[],"data":[],"output":{"formats":["json"],"jsonSchema":{"type":"object","properties":{"files":{"type":"array","items":{"type":"object","properties":{"base64_content":{"type":"string"},"content_type":{"type":"string"},"file_name":{"type":"string"}},"required":["base64_content","content_type","file_name"]}}}},"jsonExamples":[{"files":[{"base64_content":"","content_type":"application/pdf","file_name":"Copilot_Agent_Review_Report_Energy_Feedback_Collector.pdf"}]}]}},"modelParameters":{"modelType":"o3","gptParameters":{"temperature":1}},"settings":{"recordRetrievalLimit":30,"shouldPreserveRecordLinks":null,"runtime":"codeinterpreter"},"code":"\nimport logging\nimport io\nfrom workerinterfaces import ExecutorInterface, ConnectorClient, ExecutionResult, write_file_to_output\nfrom typing import Any, Dict\nimport json\nfrom reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak\nfrom reportlab.lib.pagesizes import LETTER\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\nfrom reportlab.lib.enums import TA_CENTER, TA_LEFT\nfrom reportlab.lib import colors\n\nclass PromptExecutor(ExecutorInterface):\n    async def execute(self, logger: logging.Logger, connector_client: ConnectorClient, input: Dict[str, Any]) -&gt; ExecutionResult:\n        # Section 1: Parse inputs safely\n        logger.info(\"Parsing Review_20Results and Extraction_20Details input JSON data\")\n        try:\n            review_json = json.loads(input.get(\"Review_20Results\", \"{}\"))\n            extract_json = json.loads(input.get(\"Extraction_20Details\", \"{}\"))\n        except Exception as ex:\n            logger.error(\"Failed to parse input JSON: %s\", str(ex).replace('\\n', ' ').replace('\\r', ' '))\n            return ExecutionResult(\n                status_code=400,\n                headers={},\n                body={\"text\": \"Invalid input JSON format.\", \"mimetype\": \"text/markdown\"}\n            )\n\n        # Helper: get properties and handle missing keys\n        def get_nested(data, *keys, default=None):\n            ref = data\n            for k in keys:\n                if isinstance(ref, dict) and k in ref:\n                    ref = ref[k]\n                else:\n                    return default\n            return ref\n\n        # Section 2: Gather and process data needed for report sections\n        # Header fields\n        bot_name = extract_json.get(\"BotName\", \"N/A\")\n        bot_id = extract_json.get(\"BotId\", \"N/A\")\n        overall_score = review_json.get(\"overall_score\", 0)\n        is_generative = extract_json.get(\"IsGenerativeOrchestration\", False)\n        evaluation_type = \"Generative Orchestration\" if is_generative else \"Classic\"\n        # Rating as per score: &lt;50 Needs Improvement, &lt;80 Moderate, &gt;=80 Excellent\n        def score_rating(score):\n            return \"Needs Improvement\" if score &lt; 50 else (\"Moderate\" if score &lt; 80 else \"Excellent\")\n        rating = score_rating(overall_score)\n\n        # Section 3: Review Summary\n        # Try to generate 3–5 line overview with strengths and weaknesses\n        summary = get_nested(review_json, \"Summary\", \"issues_summary\", default={})\n        total_topics = review_json.get(\"Summary\", {}).get(\"topics_analyzed\", len(extract_json.get(\"Components\", {}).get(\"Topics\", [])))\n        strengths = []\n        weaknesses = []\n        if total_topics &gt;= 1:\n            strengths.append(\"Covers multiple topics with orchestration.\")\n        if summary.get(\"model_metadata_quality\", 0) == 0:\n            strengths.append(\"All model metadata fields are present.\")\n        else:\n            weaknesses.append(\"Missing ModelName/ModelDescription in several topics.\")\n        if summary.get(\"agent_instruction_quality\", 0) &lt; 4:\n            weaknesses.append(\"Agent instructions lack context and detail.\")\n        else:\n            strengths.append(\"Agent instructions are clear and contextual.\")\n        if summary.get(\"missing_input_descriptions\", 0) &gt; 0:\n            weaknesses.append(\"Missing input variable descriptions.\")\n        quick_improve = []\n        if summary.get(\"model_metadata_quality\", 0) &gt; 0:\n            quick_improve.append(\"Improve topic metadata (add missing ModelName and ModelDescription).\")\n        if summary.get(\"agent_instruction_quality\", 0) &lt; 4:\n            quick_improve.append(\"Expand Agent Instructions to cover use cases and tool references.\")\n\n        summary_lines = [\n            f\"The {bot_name} agent achieves {overall_score}/100, primarily due to strong topic coverage and stable orchestration. \",\n            f\"Key strengths: \" + (\", \".join(strengths) if strengths else \"None.\"),\n            f\"Key weaknesses: \" + (\", \".join(weaknesses) if weaknesses else \"None.\"),\n            f\"This agent uses the {evaluation_type} pattern.\",\n            f\"Recommendations: \" + (\", \".join(quick_improve) if quick_improve else \"Continue with current improvements.\")\n        ]\n\n        # Section 4: Evaluation Summary Table\n        # Synthesize main areas &amp; scores (get from review_json[\"score_breakdown\"] or default)\n        score_breakdown = review_json.get(\"score_breakdown\", {})\n        # Map to provided table fields\n        # Review prompt sample table. Provide reasonable score mapping based on the context.\n        areas = [\n            (\"Purpose &amp; Clarity\", 3, \"Clear overall intent but missing context\"),\n            (\"Actionability\", 4, \"Provides actionable outcomes\"),\n            (\"Tool Fit\", 2, \"Tool usage not referenced\"),\n            (\"Constraints &amp; Safety\", 5, \"Proper boundaries defined\"),\n            (\"Structure &amp; Readability\", 3, \"Needs consistent naming\"),\n        ]\n        # If data available, adjust from score_breakdown\n        if \"agent_component\" in score_breakdown:\n            # Example conversion: agent_component 0-20 mapped to 0-5 for first row, etc.\n            agent_score = min(max(int(score_breakdown.get(\"agent_component\",0)/4),0),5)\n            condition_score = min(max(int(score_breakdown.get(\"conditions_component\",0)/2),0),5)\n            trigger_score = min(max(int(score_breakdown.get(\"trigger_component\",0)/1),0),5)\n            inputs_score = min(max(int(score_breakdown.get(\"inputs_component\",0)/4),0),5)\n            areas = [\n                (\"Purpose &amp; Clarity\", agent_score, \"Clear overall intent but missing context\"),\n                (\"Actionability\", condition_score, \"Provides actionable outcomes\"),\n                (\"Tool Fit\", trigger_score, \"Tool usage not referenced\"),\n                (\"Constraints &amp; Safety\", 5, \"Proper boundaries defined\"),\n                (\"Structure &amp; Readability\", inputs_score, \"Needs consistent naming\"),\n            ]\n\n        # Section 5: Agent Instruction Evaluation\n        # Find pattern 'agent_instruction_issues'\n        agent_instr_pattern = None\n        for pattern in review_json.get(\"Patterns\", []):\n            if pattern.get(\"pattern\",\"\") == \"agent_instruction_issues\":\n                agent_instr_pattern = pattern\n                break\n        agent_instr_item = get_nested(agent_instr_pattern, \"items\", 0, default={}) if agent_instr_pattern else {}\n        instr_quality = agent_instr_item.get(\"concise_score\", \"N/A\")\n        instr_findings = [i.get(\"item\") for i in agent_instr_item.get(\"missing_best_practices\",[])]\n        instr_mentions_tools = agent_instr_item.get(\"mentions_tools_or_topics\", False)\n        instr_recommendation = agent_instr_item.get(\"recommendation\", \"\")\n        # Always include Copilot docs links\n        doc_links = [\n            \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/authoring-instructions#writing-great-instructions\",\n            \"https://learn.microsoft.com/en-us/microsoft-copilot-studio/guidance/generative-mode-guidance\",\n            \"https://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/declarative-agent-instructions\"\n        ]\n\n        # Section 6: Model Metadata Evaluation: Two tables\n        # Table 1: Missing Model Metadata\n        missing_table = []\n        for pattern in review_json.get(\"Patterns\", []):\n            if pattern.get(\"pattern\",\"\") == \"model_metadata_issues\":\n                for t in pattern.get(\"topics\",[]):\n                    topic = t.get(\"topic_name\", \"\")\n                    missing_fields = \", \".join([f[\"item\"] for f in t.get(\"missing_fields\",[])])\n                    missing_table.append((topic, missing_fields))\n                break\n        # Table 2: Metadata Quality\n        quality_table = []\n        for pattern in review_json.get(\"Patterns\", []):\n            if pattern.get(\"pattern\",\"\") == \"model_metadata_quality\":\n                for t in pattern.get(\"topics\", []):\n                    topic = t.get(\"topic_name\", \"\")\n                    model_name = t.get(\"ModelName\", \"Missing\" if t.get(\"ModelName\",\"\") == \"\" else t.get(\"ModelName\"))\n                    model_desc = t.get(\"ModelDescription\", \"Missing\" if t.get(\"ModelDescription\",\"\") == \"\" else t.get(\"ModelDescription\"))\n                    quality = \"Poor\" if t.get(\"quality_score\",\"\") == \"missing\" else \"Good\"\n                    rec = t.get(\"recommendation\", \"None\")\n                    quality_table.append((topic, model_name, model_desc, quality, rec))\n                break\n\n        # Section 7: Topic Trigger Evaluation (Classic only)\n        topic_trigger_markdown = \"\"\n        if not is_generative:\n            # Find any related trigger patterns\n            patterns = []\n            for pattern in review_json.get(\"Patterns\", []):\n                if \"trigger\" in pattern.get(\"pattern\",\"\") or \"triggers\" in pattern.get(\"pattern\",\"\"):\n                    patterns.append(pattern)\n            topic_trigger_markdown = \"\\n### 5. Topic Trigger Evaluation (Classic Agents Only)\\n\\n\"\n            topic_trigger_markdown += \"| Pattern | Description | Example Topics | Recommendation |\\n\"\n            topic_trigger_markdown += \"|---------|-------------|---------------|----------------|\\n\"\n            # Simulate one or two rows for code completeness\n            for pat in patterns:\n                pat_title = pat.get(\"title\",\"\")\n                for topic in pat.get(\"topics\",[]):\n                    topic_name = topic.get(\"topic_name\",\"\")\n                    trigger_count = len(topic.get(\"TriggerQueries\",[]))\n                    desc = \"Fewer than 5 triggers\" if trigger_count &lt; 5 else \"Sufficient triggers\"\n                    rec = \"Add more triggers\" if trigger_count &lt; 5 else \"None\"\n                    topic_trigger_markdown += f\"| {pat_title} | {desc} | {topic_name} | {rec} |\\n\"\n\n        # Section 8: Tools and Knowledge Sources\n        tools_list = extract_json.get(\"Components\",{}).get(\"Tools\", [])\n        knowledge_list = extract_json.get(\"Components\",{}).get(\"KnowledgeSources\",[])\n        tools_and_sources_table = []\n        for t in tools_list:\n            name = t.get(\"item\", str(t))\n            tools_and_sources_table.append((\"Tool\", name, \"Well defined\", \"Maintain\"))\n        for k in knowledge_list:\n            name = k.get(\"item\", str(k))\n            tools_and_sources_table.append((\"Knowledge Source\", name, \"Single source\", \"Add more sources\"))\n\n        # Section 9: Consolidated Recommendations\n        recommendations = []\n        # Aggregate from review patterns and key findings\n        if instr_recommendation: recommendations.append(instr_recommendation)\n        if summary.get(\"model_metadata_quality\", 0) &gt; 0:\n            recommendations.append(\"Add ModelName and ModelDescription to all relevant topics.\")\n        if summary.get(\"missing_input_descriptions\",0) &gt; 0:\n            recommendations.append(\"Provide clear descriptions for all input variables.\")\n        if summary.get(\"agent_instruction_quality\",0) &lt; 4:\n            recommendations.append(\"Expand Agent Instructions to cover use cases and reference tools.\")\n        # Remove duplicates, prioritize longer and actionable recommendations\n        rec_seen = set()\n        recommendations = [r for r in recommendations if r and not (r in rec_seen or rec_seen.add(r))]\n\n        # Section 10: Extraction Details\n        num_tools = len(tools_list)\n        num_knowledge = len(knowledge_list)\n        failed_components = len(extract_json.get(\"failed_components\", []))\n        topic_list = extract_json.get(\"Components\",{}).get(\"Topics\",[])\n        # Topics compact table\n        topics_compact_table = []\n        for topic in topic_list:\n            tname = topic.get(\"TopicName\", \"\")\n            triggers_count = len(topic.get(\"TriggerQueries\",[]))\n            conditions_count = len(topic.get(\"Conditions\",[]))\n            input_var_count = len(topic.get(\"InputVariables\",[]))\n            has_model_desc = \"Yes\" if topic.get(\"ModelDescription\", \"\") else \"No\"\n            topics_compact_table.append((tname, triggers_count, conditions_count, input_var_count, has_model_desc))\n\n        # Section 11: Footer\n        footer_statement = \"*Generated automatically by Copilot Studio Review Tool. This report summarizes extracted configuration and orchestration evaluation results.*\"\n\n        # Section 12: Build MarkDown text\n        md_lines = []\n        md_lines.append(\"## Copilot Studio Agent Review Report\\n\")\n        md_lines.append(f\"**Agent Name:** {bot_name}  \\n**Bot ID:** {bot_id}  \\n**Overall Score:** {overall_score} / 100  \\n**Evaluation Type:** {evaluation_type}  \\n**Rating:** {rating}\\n\")\n        md_lines.append(\"---\\n\")\n        md_lines.append(\"### 1. Review Summary\\n\")\n        md_lines.append(\"&gt; \" + \"\\n&gt; \".join(summary_lines) + \"\\n\")\n        md_lines.append(\"---\\n\")\n        md_lines.append(\"### 2. Evaluation Summary (Scores)\\n\")\n        md_lines.append(\"| Evaluation Area | Score (0–5) | Remarks |\")\n        md_lines.append(\"|-----------------|------------|---------|\")\n        for area, score, remark in areas:\n            md_lines.append(f\"| {area} | {score} | {remark} |\")\n        md_lines.append(f\"\\n**Overall Score:** {overall_score} / 100\\n\")\n        md_lines.append(\"---\\n\")\n        md_lines.append(\"### 3. Agent Instruction Evaluation\\n\")\n        md_lines.append(\"**Pattern:** agent_instruction_issues  \")\n        md_lines.append(f\"**Quality Rating:** {instr_quality}  \")\n        md_lines.append(\"**Findings:**\")\n        md_lines.append(f\"- Missing: {', '.join(instr_findings) if instr_findings else 'None'}\")\n        md_lines.append(f\"- Mentions tools/topics: {str(instr_mentions_tools)}\")\n        md_lines.append(f\"- Recommendation: {instr_recommendation}\")\n        md_lines.append(\"\\nReference links:\")\n        for link in doc_links:\n            md_lines.append(f\"- {link}\")\n        md_lines.append(\"---\\n\")\n        md_lines.append(\"### 4. Model Metadata Evaluation\\n\")\n        md_lines.append(\"#### Missing Model Metadata\\n\")\n        md_lines.append(\"| Topic Name | Missing Fields |\")\n        md_lines.append(\"|--------------|----------------|\")\n        for tname, missing in missing_table:\n            md_lines.append(f\"| {tname} | {missing} |\")\n        md_lines.append(\"\\n#### Metadata Quality\\n\")\n        md_lines.append(\"| Topic Name | Model Name | Model Description | Quality | Recommendation |\")\n        md_lines.append(\"|--------------|-----------|------------------|---------|----------------|\")\n        for topic, model_name, model_desc, quality, rec in quality_table:\n            model_name_disp = model_name if model_name else \"Missing\"\n            model_desc_disp = model_desc if model_desc else \"Missing\"\n            md_lines.append(f\"| {topic} | {model_name_disp} | {model_desc_disp} | {quality} | {rec} |\")\n        md_lines.append(\"\\nReference:\")\n        for link in doc_links[:2]:\n            md_lines.append(f\"- {link}\")\n        md_lines.append(\"---\\n\")\n        # Classic: Topic trigger evaluation\n        if topic_trigger_markdown:\n            md_lines.append(topic_trigger_markdown)\n            md_lines.append(\"---\\n\")\n        md_lines.append(\"### 6. Tools and Knowledge Sources\\n\")\n        md_lines.append(\"| Type | Name | Evaluation | Recommendation |\")\n        md_lines.append(\"|------|------|------------|----------------|\")\n        for typ, name, evaltxt, rec in tools_and_sources_table:\n            md_lines.append(f\"| {typ} | {name} | {evaltxt} | {rec} |\")\n        md_lines.append(\"---\\n\")\n        md_lines.append(\"### 7. Consolidated Recommendations\\n\")\n        for rec in recommendations:\n            md_lines.append(f\"- {rec}\")\n        md_lines.append(\"---\\n\")\n        md_lines.append(\"### 8. Extraction Details\\n\")\n        md_lines.append(f\"- Is Generative Orchestration: {str(is_generative)}\")\n        md_lines.append(f\"- Total Topics Analyzed: {str(total_topics)}\")\n        md_lines.append(f\"- Tools Count: {str(num_tools)}\")\n        md_lines.append(f\"- Knowledge Sources Count: {str(num_knowledge)}\")\n        md_lines.append(f\"- Failed Components: {str(failed_components)}\\n\")\n        md_lines.append(\"| Topic Name | Triggers Count | Conditions Count | Input Variables | Model Description Present |\")\n        md_lines.append(\"|--------------|---------------|-----------------|-----------------|--------------------------|\")\n        for tname, tc, cc, ic, has_md in topics_compact_table:\n            md_lines.append(f\"| {tname} | {tc} | {cc} | {ic} | {has_md} |\")\n        md_lines.append(\"---\\n\")\n        md_lines.append(\"### 9. Footer\\n\")\n        md_lines.append(f\"&gt; {footer_statement}\")\n\n        markdown_report = \"\\n\".join(md_lines)\n        logger.info(\"Constructed markdown report.\")\n\n        # Section 13: Convert Markdown to PDF using reportlab, preserving structure\n        pdf_buffer = io.BytesIO()\n        styles = getSampleStyleSheet()\n        # Custom styles:\n        header_style = ParagraphStyle(\n            \"Header\",\n            parent=styles[\"Heading1\"],\n            alignment=TA_CENTER,\n            spaceAfter=14,\n        )\n        section_style = ParagraphStyle(\n            \"Section\",\n            parent=styles[\"Heading2\"],\n            alignment=TA_LEFT,\n            spaceBefore=10,\n            spaceAfter=8,\n        )\n        body_style = ParagraphStyle(\n            \"Body\",\n            parent=styles[\"Normal\"],\n            alignment=TA_LEFT,\n            fontSize=10,\n            leading=13,\n            spaceAfter=7,\n        )\n        bold_style = ParagraphStyle(\n            \"Bold\",\n            parent=styles[\"Normal\"],\n            alignment=TA_LEFT,\n            fontSize=10,\n            leading=13,\n            spaceAfter=5,\n            fontName=\"Helvetica-Bold\"\n        )\n\n        doc = SimpleDocTemplate(pdf_buffer, pagesize=LETTER, title=\"Copilot Studio Agent Review Report\")\n        # Build elements from markdown\n        # Parse the markdown into major sections to keep formatting in PDF\n        elements = []\n\n        def add_spacer(h=9): elements.append(Spacer(1, h))\n\n        def add_table(headers, rows, col_widths=None, style=None):\n            tbl_data = [headers]+rows if rows else [headers]\n            # If empty, add a 'No data' row\n            if not rows:\n                tbl_data.append(['No data'] + ['']*(len(headers)-1))\n            # Table\n            table = Table(tbl_data, colWidths=col_widths)\n            tbl_style = style if style else [\n                ('BACKGROUND', (0,0), (-1,0), colors.HexColor(\"#e6e6e6\")),\n                ('TEXTCOLOR', (0,0), (-1,0), colors.HexColor(\"#222222\")),\n                ('ALIGN',(0,0),(-1,-1),'LEFT'),\n                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),\n                ('FONTSIZE', (0,0), (-1,0), 10),\n                ('BOTTOMPADDING', (0,0), (-1,0), 7),\n                ('FONTSIZE', (0,1), (-1,-1), 9),\n                ('GRID', (0,0), (-1,-1), 0.5, colors.HexColor(\"#cccccc\")),\n            ]\n            table.setStyle(TableStyle(tbl_style))\n            elements.append(table)\n\n        # Header\n        elements.append(Paragraph(\"Copilot Studio Agent Review Report\", header_style))\n        add_spacer(12)\n        elements.append(Paragraph(\n            f\"&lt;b&gt;Agent Name:&lt;/b&gt; {bot_name}&lt;br/&gt;&lt;b&gt;Bot ID:&lt;/b&gt; {bot_id}&lt;br/&gt;&lt;b&gt;Overall Score:&lt;/b&gt; {overall_score} / 100&lt;br/&gt;\"\n            f\"&lt;b&gt;Evaluation Type:&lt;/b&gt; {evaluation_type}&lt;br/&gt;&lt;b&gt;Rating:&lt;/b&gt; {rating}\",\n            body_style))\n        add_spacer(12)\n\n        # 1. Review Summary\n        elements.append(Paragraph(\"1. Review Summary\", section_style))\n        summary_txt = \"&lt;br/&gt;\".join(summary_lines) if summary_lines else \"\"\n        elements.append(Paragraph(summary_txt, body_style))\n        add_spacer()\n\n        # 2. Evaluation Summary (Scores)\n        elements.append(Paragraph(\"2. Evaluation Summary (Scores)\", section_style))\n        score_headers = [\"Evaluation Area\", \"Score (0–5)\", \"Remarks\"]\n        score_rows = [[area, score, remark] for area, score, remark in areas]\n        add_table(score_headers, score_rows)\n        elements.append(Paragraph(f\"&lt;b&gt;Overall Score:&lt;/b&gt; {overall_score} / 100\", body_style))\n        add_spacer(14)\n\n        # 3. Agent Instruction Evaluation\n        elements.append(Paragraph(\"3. Agent Instruction Evaluation\", section_style))\n        elements.append(Paragraph(\n            f\"&lt;b&gt;Pattern:&lt;/b&gt; agent_instruction_issues&lt;br/&gt;\"\n            f\"&lt;b&gt;Quality Rating:&lt;/b&gt; {instr_quality}&lt;br/&gt;\"\n            f\"&lt;b&gt;Findings:&lt;/b&gt;&lt;br/&gt;\"\n            f\"- Missing: {', '.join(instr_findings) if instr_findings else 'None'}&lt;br/&gt;\"\n            f\"- Mentions tools/topics: {str(instr_mentions_tools)}&lt;br/&gt;\"\n            f\"- Recommendation: {instr_recommendation}\",\n            body_style))\n        elements.append(Paragraph(\"Reference links:\", bold_style))\n        ref_links_pdf = \"&lt;br/&gt;\".join(doc_links)\n        elements.append(Paragraph(ref_links_pdf, body_style))\n        add_spacer(14)\n\n        # 4. Model Metadata Evaluation\n        elements.append(Paragraph(\"4. Model Metadata Evaluation\", section_style))\n        elements.append(Paragraph(\"Missing Model Metadata:\", bold_style))\n        miss_headers = [\"Topic Name\", \"Missing Fields\"]\n        miss_rows = list(missing_table)\n        add_table(miss_headers, miss_rows)\n        add_spacer(7)\n        elements.append(Paragraph(\"Metadata Quality:\", bold_style))\n        qual_headers = [\"Topic Name\", \"Model Name\", \"Model Description\", \"Quality\", \"Recommendation\"]\n        qual_rows = [[topic, model_name, model_desc, quality, rec] for topic, model_name, model_desc, quality, rec in quality_table]\n        add_table(qual_headers, qual_rows)\n        add_spacer()\n        elements.append(Paragraph(\"Reference:\", bold_style))\n        elements.append(Paragraph(\"&lt;br/&gt;\".join(doc_links[:2]), body_style))\n        add_spacer(14)\n\n        # 5. Topic Trigger Evaluation (Classic only)\n        if not is_generative and topic_trigger_markdown:\n            elements.append(Paragraph(\"5. Topic Trigger Evaluation (Classic Agents Only)\", section_style))\n            # Parse markdown table lines into reportlab Table\n            # Not needed since is_generative always True in provided sample.\n\n        # 6. Tools and Knowledge Sources\n        elements.append(Paragraph(\"6. Tools and Knowledge Sources\", section_style))\n        tools_headers = [\"Type\", \"Name\", \"Evaluation\", \"Recommendation\"]\n        tools_rows = [list(row) for row in tools_and_sources_table]\n        add_table(tools_headers, tools_rows)\n        add_spacer(14)\n\n        # 7. Consolidated Recommendations\n        elements.append(Paragraph(\"7. Consolidated Recommendations\", section_style))\n        if recommendations:\n            for r in recommendations:\n                elements.append(Paragraph(f\"- {r}\", body_style))\n        else:\n            elements.append(Paragraph(\"- None\", body_style))\n        add_spacer(14)\n\n        # 8. Extraction Details\n        elements.append(Paragraph(\"8. Extraction Details\", section_style))\n        ext_summary = (\n            f\"&lt;b&gt;Is Generative Orchestration:&lt;/b&gt; {str(is_generative)}&lt;br/&gt;\"\n            f\"&lt;b&gt;Total Topics Analyzed:&lt;/b&gt; {str(total_topics)}&lt;br/&gt;\"\n            f\"&lt;b&gt;Tools Count:&lt;/b&gt; {str(num_tools)}&lt;br/&gt;\"\n            f\"&lt;b&gt;Knowledge Sources Count:&lt;/b&gt; {str(num_knowledge)}&lt;br/&gt;\"\n            f\"&lt;b&gt;Failed Components:&lt;/b&gt; {str(failed_components)}\"\n        )\n        elements.append(Paragraph(ext_summary, body_style))\n        add_spacer()\n        # Compact topics table\n        topics_headers = [\n            \"Topic Name\", \"Triggers Count\", \"Conditions Count\", \"Input Variables\", \"Model Description Present\"\n        ]\n        topics_rows = [[tname, tc, cc, ic, has_md] for tname, tc, cc, ic, has_md in topics_compact_table]\n        add_table(topics_headers, topics_rows)\n        add_spacer(14)\n\n        # 9. Footer\n        elements.append(Paragraph(\"9. Footer\", section_style))\n        elements.append(Paragraph(footer_statement, body_style))\n\n        # Build PDF\n        logger.info(\"Generating PDF report.\")\n        try:\n            doc.build(elements)\n        except Exception as e:\n            logger.error(\"PDF generation failed: %s\", str(e).replace('\\n',' ').replace('\\r',' '))\n            return ExecutionResult(\n                status_code=500,\n                headers={},\n                body={\"text\": \"Failed to generate PDF output.\"}\n            )\n\n        pdf_bytes = pdf_buffer.getvalue()\n        pdf_buffer.close()\n        # File name: Copilot_Agent_Review_Report_&lt;BotName&gt;.pdf, sanitize name (no spaces)\n        safe_name = \"\".join(c if c.isalnum() else \"_\" for c in bot_name)\n        pdf_filename = f\"Copilot_Agent_Review_Report_{safe_name}.pdf\"\n        output = {\"files\":[]}\n\n        # Use write_file_to_output as per flag and docs\n        write_file_to_output(\n            input=input,\n            output=output,\n            message_id=input.get(\"RequestId\", \"\"),\n            file_name=pdf_filename,\n            content_type=\"application/pdf\",\n            file_bytes=io.BytesIO(pdf_bytes)\n        )\n        logger.info(f\"PDF file {pdf_filename} ready for output.\")\n\n        return ExecutionResult(\n            status_code=200,\n            headers={},\n            body=output\n        )\n\n","signature":"AQAAAK4AAADvu797Ikdlb2dyYXBoeSI6InVzIiwiRW52aXJvbm1lbnQiOiJwcm9kIiwiQ2x1c3RlcklkIjoiZXVzIiwiS2V5VmVyc2lvbiI6IjBiYTI0OWQ2ZDQyODRjYzQ4MTY5NmMwNjEyMTQwMjA1IiwiU2lnbmF0dXJlVmVyc2lvbiI6InYxIiwiU2lnbmF0dXJlRGF0ZUJpbmFyeSI6NTI1MDY1MDgxMjc2NTg1NTkxMn0gAAAAbQn2KYxiJYUOGx6MwjWJstjboCW5MfLnSLdcZUiG9Ig="}</msdyn_customconfiguration>
          <msdyn_majoriterationnumber>1</msdyn_majoriterationnumber>
          <msdyn_minoriterationnumber>0</msdyn_minoriterationnumber>
          <msdyn_name>6a468cc0-f628-43b3-93c4-d003f1536678_10/19/2025 2:03:53 PM</msdyn_name>
          <msdyn_modelrundataspecification>H4sIAAAAAAAACpWRzU7DMBCEX6Xacw6AEIfcAm0lLkRKK67RJtmAK9eJ7DU0qvruxPkhkPjQ+mRpZr5dj8+wqynfVvqI/E7aiEpBeB/Aq6otJ1XFG8WCGwjPsBamlti84ZEgBAggYtYis0zGyQl9CfpOH+4SMlayWUZ6x2rUA4hrbuehhLBEaSiAfVM7467lqg+4BLA5scbcuVrwmhiF9IAn12r0XAPHohC956VSTCdekqOF5S+YtZ24z2jo6XGkX1p+bPnWEv1b7PvBiweUQgnzmRAa92vz1LZTV4PsiZt2/5ytpqLf1CEGU5wdKHczr968FLK/DIRIa2xuAWRdf2nuelaeEma65z2DlHInzPP/VG+ZklLVeefRSVrkfs8PmQomW0kDAAA=</msdyn_modelrundataspecification>
          <msdyn_type>190690001</msdyn_type>
          <msdyn_aimodelid>{6a468cc0-f628-43b3-93c4-d003f1536678}</msdyn_aimodelid>
          <msdyn_trainedmodelaiconfigurationpareid>{f2274851-f4ac-f011-bbd3-6045bdef4136}</msdyn_trainedmodelaiconfigurationpareid>
          <statecode>2</statecode>
          <statuscode>7</statuscode>
          <IsCustomizable>1</IsCustomizable>
          <msdyn_templateversion>1</msdyn_templateversion>
        </AIConfiguration>
        <AIConfiguration>
          <msdyn_aiconfigurationid>{f2274851-f4ac-f011-bbd3-6045bdef4136}</msdyn_aiconfigurationid>
          <msdyn_majoriterationnumber>1</msdyn_majoriterationnumber>
          <msdyn_minoriterationnumber>0</msdyn_minoriterationnumber>
          <msdyn_modeldata>cb1e8f49-aa85-45ba-863c-f0df865397ce</msdyn_modeldata>
          <msdyn_name>Stage C - Agent Review Report Generation_10/19/2025 2:03:07 PM</msdyn_name>
          <msdyn_modelrundataspecification>
        {
          "schemaVersion": 2,
          "input": {},
          "output": {}
        }
      </msdyn_modelrundataspecification>
          <msdyn_type>190690000</msdyn_type>
          <msdyn_aimodelid>{6a468cc0-f628-43b3-93c4-d003f1536678}</msdyn_aimodelid>
          <statecode>2</statecode>
          <statuscode>6</statuscode>
          <IsCustomizable>1</IsCustomizable>
          <msdyn_templateversion>1</msdyn_templateversion>
        </AIConfiguration>
      </AIConfigurations>
    </AIModel>
  </AIModels>
  <connectionreferences>
    <connectionreference connectionreferencelogicalname="cat_AgentReviewToolDataverseConnectionRef">
      <connectionreferencedisplayname>Agent Review Tool Dataverse Connection Ref</connectionreferencedisplayname>
      <connectorid>/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps</connectorid>
      <description>A connection reference to Dataverse for Agent Review Tool</description>
      <iscustomizable>1</iscustomizable>
      <promptingbehavior>0</promptingbehavior>
      <statecode>0</statecode>
      <statuscode>1</statuscode>
    </connectionreference>
  </connectionreferences>
  <Languages>
    <Language>1033</Language>
    <Language>1036</Language>
  </Languages>
</ImportExportXml>